{"version":3,"sources":["webpack:///./node_modules/@lampix/core/lib/lampix.js","webpack:///./node_modules/poly-decomp/src/index.js","webpack:///./node_modules/matter-js/build/matter.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@lampix/physics/lib/lampix.js"],"names":["window","module","exports","e","t","n","r","i","l","call","m","c","d","o","Object","defineProperty","enumerable","get","Symbol","toStringTag","value","__esModule","create","bind","default","prototype","hasOwnProperty","p","s","WatchersRemoved","WatchersAdded","WatchersPaused","WatchersResumed","WatcherUpdated","LampixInfo","GetApps","TransformCoordinates","AppConfig","Classification","Location","FileWritten","FileRead","SwitchToApp","LampixEvents","eventToCallbackMap","setInterval","console","log","_lampix_internal","forEach","clearInterval","waitForAPI","Promise","push","a","listen","u","request","request_id","resolve","reject","publisher","subscribe","error","data","then","catch","promise","NNClassifier","NNSegmenter","DepthClassifier","Names","Polygon","Rectangle","Type","Shape","Watcher","Fingers","StandardNeuralNetworks","this","__importDefault","toString","substr","generateId","Uint8Array","crypto","getRandomValues","Array","from","join","APP_SWITCHER_NAME","WINDOW_WIDTH","WINDOW_HEIGHT","rectangle","type","width","height","posX","posY","LampixBridge","__read","iterator","next","done","return","__spread","arguments","length","concat","__importStar","f","h","v","_","w","b","bindEvents","g","constants","helpers","polygon","presets","button","getLampixInfo","switchToApp","exit","getApps","getAppConfig","writeJsonToFile","readJsonFromFile","transformRectCoords","watchers","add","isArray","watcherManager","addWatchers","remove","removeWatchers","pauseAll","pauseAllWatchers","resumeAll","resumeAllWatchers","y","get_lampix_info","JSON","stringify","info","listeners","queue","Date","Math","random","substring","splice","indexOf","publish","apply","callback","keys","camelCaseToKebabCase","name","params","switch_to_app","replace","toLowerCase","URLSearchParams","location","search","get_apps","apps","fetch","ok","text","parse","filename","write_file","read_file","rectangles","transform_coordinates","onObjectsClassified","watcher_id","objects","onObjectsLocated","onWatchersAdded","onWatchersRemoved","onWatchersPaused","onWatchersResumed","onWatcherUpdated","onLampixInfo","onGetApps","onTransformCoordinates","onAppConfig","config","onFileWritten","onFileRead","pendingAddition","pendingRemoval","pendingPausing","pendingResuming","pendingUpdate","addWatchersInitializer","removeWatchersInitializer","pauseWatchers","pauseWatchersInitializer","resumeWatchers","resumeWatchersInitializer","updateWatcherShape","updateWatcherShapeInitializer","map","watcherActionHandler","__assign","assign","id","state","_id","source","createRegisteredWatcher","add_watchers","defineProperties","writable","configurable","active","onClassification","onLocation","resume","pause","setTimeout","updateShape","shape","Error","framesToPop","self","Function","eval","watcher_ids","remove_watchers","pause_watchers","resume_watchers","update_watcher_shape","neural_network_name","lineInt","l1","l2","precision","a1","b1","c1","a2","b2","c2","det","scalar_eq","lineSegmentsIntersect","p1","p2","q1","q2","dx","dy","da","db","triangleArea","isLeft","isLeftOn","isRight","isRightOn","decomp","edges","polygonGetCutEdges","min","tmp1","tmp2","tmpPoly","nDiags","Number","MAX_VALUE","polygonIsReflex","j","polygonCanSee","polygonCopy","k","polygonAt","polygonSlice","cutEdges","polys","cutEdge","poly","result","quickDecomp","polygonQuickDecomp","reflexVertices","steinerPoints","delta","maxlevel","level","upperInt","lowerInt","upperDist","lowerDist","closestDist","upperIndex","lowerIndex","closestIndex","lowerPoly","upperPoly","warn","getIntersectionPoint","sqdist","polygonAppend","polygonCanSee2","isSimple","path","removeCollinearPoints","num","collinear","removeDuplicatePoints","pi","points_eq","makeCCW","br","tmp","N","pop","polygonReverse","tmpPoint1","tmpPoint2","thresholdAngle","ab","bc","dot","magA","sqrt","magB","acos","to","tmpLine1","tmpLine2","dist","targetPoly","polygonClear","abs","global","require","code","1","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","options","defaults","nextId","label","parts","plugin","angle","vertices","fromPath","position","x","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","max","settings","property","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","clockwiseSort","hull","hullCentre","total","_totalProperties","sub","rotateAbout","magnitude","translation","rotation","point","cos","sin","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","../core/Common","../core/Sleeping","../geometry/Axes","../geometry/Bounds","../geometry/Vector","../geometry/Vertices","../render/Render","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","trigger","obj","addBody","addConstraint","addComposite","constraint","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","move","rebase","recursive","../core/Events","./Body","3","World","gravity","../constraint/Constraint","./Composite","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","partA","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","./Pair","./SAT","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","./Detector","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","./Contact","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","contains","../factory/Bodies","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","prevIndex","nextIndex","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","../body/Composite","../collision/Detector","../core/Mouse","./Constraint","14","_nextId","_seed","_nowStartTime","argsStart","deepClone","prop","constructor","key","values","begin","end","split","val","shuffle","array","temp","choices","isElement","HTMLElement","nodeType","nodeName","isFunction","isPlainObject","isString","now","performance","webkitNow","_seededRandom","colorToNumber","colorString","charAt","parseInt","logLevel","haystack","needle","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","../body/Body","../body/World","../collision/Grid","../collision/Pairs","../collision/Resolver","./Common","./Events","./Metrics","./Sleeping","16","eventNames","names","off","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","./Plugin","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","run","time","tick","stop","start","./Engine","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","z","concave","decomposed","chunk","chunkVertices","pav","pbv","magnitudeSquared","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","./Bodies","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","alpha","sort","flag","upper","lower","30","RenderPixi","../collision/Contact","../collision/Pair","../collision/Query","../collision/SAT","../constraint/MouseConstraint","../core/Engine","../core/Matter","../core/Metrics","../core/Plugin","../core/Runner","../factory/Composites","../geometry/Svg","../render/RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","debugTimestamp","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","S","M","P","C","A","O","B","I","T","R","V","E","F","W","L","D","q","aTAM","worldObjects","utils","addAttracted","addAttractor","addAttractorOrbit","applyForceToBody","attractAllToOne","attractSomeToOne","checkIfSpaceOccupied","checkOnScreen","clearMatter","createCircular","createConstraint","createPolygon","createRectangle","createIrregular","deleteBody","deleteComposite","deleteConstraint","getAngleBetweenTwoPoints","randomAlphaMinMaxDeg","removeAttracted","removeAttractor","rotateBody","scaleBody","scaleBodyOverTime","setGravity","setPositionOfBody","setStaticToBody","suggestPositionWithinScreenBounds","translateBody","updateMatterEngine","setup","noRenderer","globalContext","gravityY","gravityX","noWalls","matterOptions","MatterSetup","__extends","setPrototypeOf","__proto__","growComplete","myID","MatterObjects","bodyID","animSteps","toScaleX","toScaleY","setScaleOverTime","setFriction","setElasticity","setNewAngle","GlobalObject","MatterBody","attractor","customOrbit","stopAttraction","attracted","orbitMin","orbitMax","cx","cy","ObjectCircular","show","ellipse","ObjectConstraint","growOver","animStep","setDamping","setStiffness","ObjectPolygon","ObjectRectangle","ObjectIrregular","colorStroke","colorFill","init","attractors","Attractors","gravityConstant"],"mappings":"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","file":"vendor.8e61e9bf536dd97c0624.js","sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.lampix=t():e.lampix=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=10)}([function(e,t,n){\"use strict\";var r,i;Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e.WatchersRemoved=\"lx/watchers-removed\",e.WatchersAdded=\"lx/watchers-added\",e.WatchersPaused=\"lx/watchers-paused\",e.WatchersResumed=\"lx/watchers-resumed\",e.WatcherUpdated=\"lx/watcher-updated\",e.LampixInfo=\"lx/lampix-info\",e.GetApps=\"lx/get-apps\",e.TransformCoordinates=\"lx/transform-coordinates\",e.AppConfig=\"lx/app-config\",e.Classification=\"lx/classification\",e.Location=\"lx/location\",e.FileWritten=\"lx/file-written\",e.FileRead=\"lx/file-read\",e.SwitchToApp=\"lx/switch-to-app\"}(i=t.LampixEvents||(t.LampixEvents={})),t.eventToCallbackMap=((r={})[i.WatchersAdded]=\"onWatchersAdded\",r[i.WatchersRemoved]=\"onWatchersRemoved\",r[i.WatchersPaused]=\"onWatchersPaused\",r[i.WatchersResumed]=\"onWatchersResumed\",r[i.WatcherUpdated]=\"onWatcherUpdated\",r[i.Classification]=\"onClassification\",r[i.Location]=\"onLocation\",r[i.LampixInfo]=\"onLampixInfo\",r[i.GetApps]=\"onGetApps\",r[i.AppConfig]=\"onAppConfig\",r[i.TransformCoordinates]=\"onTransformCoordinates\",r[i.FileRead]=\"onFileRead\",r[i.FileWritten]=\"onFileWritten\",r[i.SwitchToApp]=\"onSwitchApp\",r)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=!1,i=[],o=setInterval(function(){console.log(\"Checking periodically for JS bindings...\"),(r=!!window._lampix_internal)&&(console.log(\"Bindings received\"),i.forEach(function(e){return e()}),i=null,clearInterval(o))},25);t.waitForAPI=function(){return new Promise(function(e){r?e():i.push(e)})}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(4),i=n(0),o=n(14),a={};t.listen=function(e,t){void 0===t&&(t=null);var n=i.eventToCallbackMap[e],u=o.request(n,t);a[e]=a[e]||{};var s=a[e][u.request_id]={},c=new Promise(function(e,t){s.resolve=e,s.reject=t}),l=r.publisher.subscribe(e,function(t){var n=t.request_id,r=t.error,i=t.data;u.request_id===n&&(r?s.reject(r):s.resolve(i),s=null,delete a[e][n])});return c.then(function(e){return l(),e}),c.catch(function(e){throw l(),e}),{promise:c,request:u}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){!function(e){e.NNClassifier=\"NeuralNetworkClassifier\",e.NNSegmenter=\"NeuralNetworkSegmenter\",e.DepthClassifier=\"DepthClassifier\"}(e.Names||(e.Names={})),function(e){!function(e){e.Polygon=\"polygon\",e.Rectangle=\"rectangle\"}(e.Type||(e.Type={}))}(e.Shape||(e.Shape={}))}(t.Watcher||(t.Watcher={})),function(e){e.Fingers=\"fingers\"}(t.StandardNeuralNetworks||(t.StandardNeuralNetworks={}))},function(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(n(13)).default();t.publisher=i},function(e,t){e.exports=function(){}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=function(e){return(\"0\"+e.toString(16)).substr(-2)};t.generateId=function(e){void 0===e&&(e=40);var t=new Uint8Array(e/2);return window.crypto.getRandomValues(t),Array.from(t,r).join(\"\")}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.APP_SWITCHER_NAME=\"app-switcher\",t.WINDOW_WIDTH=1280,t.WINDOW_HEIGHT=800},function(e,t,n){var r=n(30).Symbol;e.exports=r},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(3);t.rectangle=function(e,t,n,i){return{type:r.Watcher.Shape.Type.Rectangle,data:{width:n,height:i,posX:e,posY:t}}}},function(e,t,n){\"use strict\";var r=n(11);e.exports=new r.LampixBridge},function(e,t,n){\"use strict\";var r=this&&this.__read||function(e,t){var n=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(12),u=n(15),s=n(17),c=n(18),l=n(19),f=n(20),p=n(21),d=n(22),h=n(23),v=n(24),m=o(n(7)),_=n(9),w=n(41),b=n(42);h.bindEvents();var g=function(){return function(){this.constants=m,this.helpers={rectangle:_.rectangle,polygon:w.polygon},this.presets={button:b.button},this.getLampixInfo=a.getLampixInfo(),this.switchToApp=u.switchToApp(),this.exit=s.exit(),this.getApps=c.getApps(),this.getAppConfig=l.getAppConfig(),this.writeJsonToFile=f.writeJsonToFile(),this.readJsonFromFile=p.readJsonFromFile(),this.transformRectCoords=d.transformRectCoords(),this.watchers={add:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[];return e.forEach(function(e){Array.isArray(e)?n=i(n,e):n.push(e)}),v.watcherManager.addWatchers(n)},remove:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return v.watcherManager.removeWatchers(e)},pauseAll:function(){return v.watcherManager.pauseAllWatchers()},resumeAll:function(){return v.watcherManager.resumeAllWatchers()}}}}();t.LampixBridge=g;var y=n(3);t.Watcher=y.Watcher},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.getLampixInfo=function(){return function(){return r.waitForAPI().then(function(){var e=o.listen(i.LampixEvents.LampixInfo),t=e.promise,n=e.request;return window._lampix_internal.get_lampix_info(JSON.stringify(n)),t}).then(function(e){return e.info})}}},function(e,t,n){\"use strict\";var r=this&&this.__read||function(e,t){var n=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e};Object.defineProperty(t,\"__esModule\",{value:!0});var o=function(){return{listeners:{},queue:[]}};t.default=function(e){return void 0===e&&(e={}),{subscribe:function(t,n,r){void 0===r&&(r=n),Object.prototype.hasOwnProperty.call(e,t)||(e[t]=o());var i=(+new Date*Math.random()).toString(36).substring(0,8),a=n.bind(r);return e[t].listeners[i]=a,e[t].queue.push(i),function(){delete e[t].listeners[i],e[t].queue.splice(e[t].queue.indexOf(i),1)}},publish:function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];if(Object.prototype.hasOwnProperty.call(e,t)){var o=e[t];i(o.queue).forEach(function(e){if(o.listeners[e]){var t=o.listeners[e];t.apply(t,n)}})}}}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(6);t.request=function(e,t){return{callback:e,data:t,request_id:r.generateId()}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(16),o=n(2),a=n(0);t.switchToApp=function(){return function(e,t){return void 0===t&&(t={}),r.waitForAPI().then(function(){var n={};Object.keys(t).forEach(function(e){n[i.camelCaseToKebabCase(e)]=t[e]});var r=o.listen(a.LampixEvents.SwitchToApp,{name:e,params:n}),u=r.promise,s=r.request;return window._lampix_internal.switch_to_app(JSON.stringify(s)),u}).then(function(){})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.camelCaseToKebabCase=function(e){return e.replace(/([A-Z])/g,function(e){return\"-\"+e.toLowerCase()})}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(7),o=n(2),a=n(0);t.exit=function(){return function(){return r.waitForAPI().then(function(){var e=new URLSearchParams(window.location.search).get(\"switch-back-to\")||i.APP_SWITCHER_NAME,t=o.listen(a.LampixEvents.SwitchToApp,{name:e}),n=t.promise,r=t.request;return window._lampix_internal.switch_to_app(JSON.stringify(r)),n}).then(function(){})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.getApps=function(){return function(){return r.waitForAPI().then(function(){var e=o.listen(i.LampixEvents.GetApps),t=e.promise,n=e.request;return window._lampix_internal.get_apps(JSON.stringify(n)),t}).then(function(e){return e.apps})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.getAppConfig=function(){return function(){return fetch(\"./config.json\").then(function(e){return e.ok?e.text():null}).then(function(e){if(!e)return null;try{return JSON.parse(e)}catch(e){return null}})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.writeJsonToFile=function(){return function(e,t){return r.waitForAPI().then(function(){var n=o.listen(i.LampixEvents.FileWritten,{filename:e,data:t}),r=n.promise,a=n.request;return window._lampix_internal.write_file(JSON.stringify(a)),r}).then(function(){})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.readJsonFromFile=function(){return function(e){return r.waitForAPI().then(function(){var t=o.listen(i.LampixEvents.FileRead,{filename:e}),n=t.promise,r=t.request;return window._lampix_internal.read_file(JSON.stringify(r)),n}).then(function(e){return e.data})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.transformRectCoords=function(){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return r.waitForAPI().then(function(){var t=o.listen(i.LampixEvents.TransformCoordinates,{rectangles:e}),n=t.promise,r=t.request;return window._lampix_internal.transform_coordinates(JSON.stringify(r)),n}).then(function(e){return e.rectangles})}}},function(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(n(5)),o=n(4),a=n(0),u=function(){t.bindEvents=u=i.default,window.onObjectsClassified=function(e,t){o.publisher.publish(a.LampixEvents.Classification,{error:null,data:{watcher_id:e,objects:t}})},window.onObjectsLocated=function(e,t){o.publisher.publish(a.LampixEvents.Location,{error:null,data:{watcher_id:e,objects:t}})},window.onWatchersAdded=function(e){o.publisher.publish(a.LampixEvents.WatchersAdded,e)},window.onWatchersRemoved=function(e){o.publisher.publish(a.LampixEvents.WatchersRemoved,e)},window.onWatchersPaused=function(e){o.publisher.publish(a.LampixEvents.WatchersPaused,e)},window.onWatchersResumed=function(e){o.publisher.publish(a.LampixEvents.WatchersResumed,e)},window.onWatcherUpdated=function(e){o.publisher.publish(a.LampixEvents.WatcherUpdated,e)},window.onLampixInfo=function(e){o.publisher.publish(a.LampixEvents.LampixInfo,e)},window.onGetApps=function(e){o.publisher.publish(a.LampixEvents.GetApps,e)},window.onTransformCoordinates=function(e){o.publisher.publish(a.LampixEvents.TransformCoordinates,e)},window.onAppConfig=function(e){o.publisher.publish(a.LampixEvents.AppConfig,{error:null,data:{config:e}})},window.onFileWritten=function(e){o.publisher.publish(a.LampixEvents.FileWritten,e)},window.onFileRead=function(e){o.publisher.publish(a.LampixEvents.FileRead,e)}};t.bindEvents=u},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(25),i=n(36),o=n(37),a=n(38),u=n(39),s=n(40),c=n(0),l={};t.watcherManager=l,l.watchers={},l.pendingAddition={},l.pendingRemoval={},l.pendingPausing={},l.pendingResuming={},l.pendingUpdate={},l.addWatchers=r.addWatchersInitializer(l),l.removeWatchers=i.removeWatchersInitializer(l),l.pauseWatchers=o.pauseWatchersInitializer(),l.resumeWatchers=a.resumeWatchersInitializer(),l.updateWatcherShape=u.updateWatcherShapeInitializer();var f=function(){return Object.keys(l.watchers).map(function(e){return l.watchers[e]})};l.pauseAllWatchers=function(){return l.pauseWatchers(f())},l.resumeAllWatchers=function(){return l.resumeWatchers(f())},s.watcherActionHandler(\"onClassification\",l,c.LampixEvents.Classification),s.watcherActionHandler(\"onLocation\",l,c.LampixEvents.Location)},function(e,t,n){\"use strict\";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,\"__esModule\",{value:!0});var i=n(26),o=n(1),a=n(0),u=n(2),s=function(e){return r({id:e.state._id},e.source)};t.addWatchersInitializer=function(e){return function(t){var n=t.map(function(t){return i.createRegisteredWatcher(t,e)}),r=u.listen(a.LampixEvents.WatchersAdded,{watchers:n.map(s)}),c=r.promise,l=r.request;return c.then(function(){return n.forEach(function(t){return e.watchers[t.state._id]=t,t})}),o.waitForAPI().then(function(){return window._lampix_internal.add_watchers(JSON.stringify(l)),c}).then(function(){return n})}}},function(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(n(27)),o=r(n(28)),a=r(n(5)),u=n(6);t.createRegisteredWatcher=function(e,t){var n=Object.defineProperties({},{_id:{value:u.generateId(),writable:!1,configurable:!1},active:{value:!0,writable:!0,configurable:!1}}),r={state:n,source:e,onClassification:e.onClassification||a.default,onLocation:e.onLocation||a.default,resume:function(){return n.active?Promise.resolve():t.resumeWatchers([r])},pause:function(e){return void 0===e&&(e=0),i.default(o.default(e)&&e>=0,\"pause() takes an optional positive number as milliseconds\"),e>0&&setTimeout(r.resume,e),n.active?t.pauseWatchers([r]):Promise.resolve()},remove:function(){return t.removeWatchers([r]).then(function(){})},updateShape:function(e){return t.updateWatcherShape(n._id,e).then(function(){r.source.shape=e})}};return r}},function(e,t,n){\"use strict\";e.exports=function(e,t,n,r,i,o,a,u){if(!e){var s;if(void 0===t)s=new Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var c=[n,r,i,o,a,u],l=0;(s=new Error(t.replace(/%s/g,function(){return c[l++]}))).name=\"Invariant Violation\"}throw s.framesToPop=1,s}}},function(e,t,n){var r=n(29),i=n(35),o=\"[object Number]\";e.exports=function(e){return\"number\"==typeof e||i(e)&&r(e)==o}},function(e,t,n){var r=n(8),i=n(33),o=n(34),a=\"[object Null]\",u=\"[object Undefined]\",s=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?u:a:s&&s in Object(e)?i(e):o(e)}},function(e,t,n){var r=n(31),i=\"object\"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function(\"return this\")();e.exports=o},function(e,t,n){(function(t){var n=\"object\"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(32))},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(8),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var i=a.call(e);return r&&(t?e[u]=n:delete e[u]),i}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t){e.exports=function(e){return null!=e&&\"object\"==typeof e}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.removeWatchersInitializer=function(e){return function(t){var n=o.listen(i.LampixEvents.WatchersRemoved,{watcher_ids:t.map(function(e){return e.state._id})}),a=n.promise,u=n.request;return a.then(function(){return t.forEach(function(t){delete e.watchers[t.state._id]})}),r.waitForAPI().then(function(){return window._lampix_internal.remove_watchers(JSON.stringify(u)),a}).then(function(){})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.pauseWatchersInitializer=function(){return function(e){var t=o.listen(i.LampixEvents.WatchersPaused,{watcher_ids:e.map(function(e){return e.state._id})}),n=t.promise,a=t.request;return n.then(function(){return e.forEach(function(e){e.state.active=!1})}),r.waitForAPI().then(function(){return window._lampix_internal.pause_watchers(JSON.stringify(a)),n}).then(function(){})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.resumeWatchersInitializer=function(){return function(e){var t=o.listen(i.LampixEvents.WatchersResumed,{watcher_ids:e.map(function(e){return e.state._id})}),n=t.promise,a=t.request;return n.then(function(){return e.forEach(function(e){e.state.active=!0})}),r.waitForAPI().then(function(){return window._lampix_internal.resume_watchers(JSON.stringify(a)),n}).then(function(){})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),i=n(0),o=n(2);t.updateWatcherShapeInitializer=function(){return function(e,t){var n=o.listen(i.LampixEvents.WatcherUpdated,{watcher_id:e,shape:t}),a=n.promise,u=n.request;return r.waitForAPI().then(function(){return window._lampix_internal.update_watcher_shape(JSON.stringify(u)),a}).then(function(){})}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(4);t.watcherActionHandler=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];function o(n){var r=n.data,i=r.watcher_id,o=r.objects,a=t.watchers[i];if(!a)throw new Error(\"RegisteredWatcher \"+i+\" does not exist.\");a[e].call(a[e],o)}n.forEach(function(e){r.publisher.subscribe(e,o)})}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(3);t.polygon=function(e){return{type:r.Watcher.Shape.Type.Polygon,data:e}}},function(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0});var i=n(9),o=r(n(5)),a=n(3);t.button=function(e,t,n,r){void 0===n&&(n=o.default);var u=r.width,s=void 0===u?50:u,c=r.height,l=void 0===c?50:c;return{onClassification:n,shape:i.rectangle(e,t,s,l),name:a.Watcher.Names.NNClassifier,params:{neural_network_name:a.StandardNeuralNetworks.Fingers}}}}])});\n//# sourceMappingURL=lampix.js.map","module.exports = {\n    decomp: polygonDecomp,\n    quickDecomp: polygonQuickDecomp,\n    isSimple: polygonIsSimple,\n    removeCollinearPoints: polygonRemoveCollinearPoints,\n    removeDuplicatePoints: polygonRemoveDuplicatePoints,\n    makeCCW: polygonMakeCCW\n};\n\n/**\n * Compute the intersection between two lines.\n * @static\n * @method lineInt\n * @param  {Array}  l1          Line vector 1\n * @param  {Array}  l2          Line vector 2\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\n * @return {Array}              The intersection point.\n */\nfunction lineInt(l1,l2,precision){\n    precision = precision || 0;\n    var i = [0,0]; // point\n    var a1, b1, c1, a2, b2, c2, det; // scalars\n    a1 = l1[1][1] - l1[0][1];\n    b1 = l1[0][0] - l1[1][0];\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\n    a2 = l2[1][1] - l2[0][1];\n    b2 = l2[0][0] - l2[1][0];\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\n    det = a1 * b2 - a2*b1;\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\n        i[0] = (b2 * c1 - b1 * c2) / det;\n        i[1] = (a1 * c2 - a2 * c1) / det;\n    }\n    return i;\n}\n\n/**\n * Checks if two line segments intersects.\n * @method segmentsIntersect\n * @param {Array} p1 The start vertex of the first line segment.\n * @param {Array} p2 The end vertex of the first line segment.\n * @param {Array} q1 The start vertex of the second line segment.\n * @param {Array} q2 The end vertex of the second line segment.\n * @return {Boolean} True if the two line segments intersect\n */\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\n\tvar dx = p2[0] - p1[0];\n\tvar dy = p2[1] - p1[1];\n\tvar da = q2[0] - q1[0];\n\tvar db = q2[1] - q1[1];\n\n\t// segments are parallel\n\tif((da*dy - db*dx) === 0){\n\t\treturn false;\n\t}\n\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\n\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\n}\n\n/**\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\n * @static\n * @method area\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @return {Number}\n */\nfunction triangleArea(a,b,c){\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\n}\n\nfunction isLeft(a,b,c){\n    return triangleArea(a,b,c) > 0;\n}\n\nfunction isLeftOn(a,b,c) {\n    return triangleArea(a, b, c) >= 0;\n}\n\nfunction isRight(a,b,c) {\n    return triangleArea(a, b, c) < 0;\n}\n\nfunction isRightOn(a,b,c) {\n    return triangleArea(a, b, c) <= 0;\n}\n\nvar tmpPoint1 = [],\n    tmpPoint2 = [];\n\n/**\n * Check if three points are collinear\n * @method collinear\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\n * @return {Boolean}\n */\nfunction collinear(a,b,c,thresholdAngle) {\n    if(!thresholdAngle){\n        return triangleArea(a, b, c) === 0;\n    } else {\n        var ab = tmpPoint1,\n            bc = tmpPoint2;\n\n        ab[0] = b[0]-a[0];\n        ab[1] = b[1]-a[1];\n        bc[0] = c[0]-b[0];\n        bc[1] = c[1]-b[1];\n\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\n            angle = Math.acos(dot/(magA*magB));\n        return angle < thresholdAngle;\n    }\n}\n\nfunction sqdist(a,b){\n    var dx = b[0] - a[0];\n    var dy = b[1] - a[1];\n    return dx * dx + dy * dy;\n}\n\n/**\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\n * @method at\n * @param  {Number} i\n * @return {Array}\n */\nfunction polygonAt(polygon, i){\n    var s = polygon.length;\n    return polygon[i < 0 ? i % s + s : i % s];\n}\n\n/**\n * Clear the polygon data\n * @method clear\n * @return {Array}\n */\nfunction polygonClear(polygon){\n    polygon.length = 0;\n}\n\n/**\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\n * @method append\n * @param {Polygon} poly The polygon to get points from.\n * @param {Number}  from The vertex index in \"poly\".\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\n * @return {Array}\n */\nfunction polygonAppend(polygon, poly, from, to){\n    for(var i=from; i<to; i++){\n        polygon.push(poly[i]);\n    }\n}\n\n/**\n * Make sure that the polygon vertices are ordered counter-clockwise.\n * @method makeCCW\n */\nfunction polygonMakeCCW(polygon){\n    var br = 0,\n        v = polygon;\n\n    // find bottom right point\n    for (var i = 1; i < polygon.length; ++i) {\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\n            br = i;\n        }\n    }\n\n    // reverse poly if clockwise\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\n        polygonReverse(polygon);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Reverse the vertices in the polygon\n * @method reverse\n */\nfunction polygonReverse(polygon){\n    var tmp = [];\n    var N = polygon.length;\n    for(var i=0; i!==N; i++){\n        tmp.push(polygon.pop());\n    }\n    for(var i=0; i!==N; i++){\n\t\tpolygon[i] = tmp[i];\n    }\n}\n\n/**\n * Check if a point in the polygon is a reflex point\n * @method isReflex\n * @param  {Number}  i\n * @return {Boolean}\n */\nfunction polygonIsReflex(polygon, i){\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\n}\n\nvar tmpLine1=[],\n    tmpLine2=[];\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee(polygon, a,b) {\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\n\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\n        return false;\n    }\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\n            continue;\n        }\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\n            l1[0] = polygonAt(polygon, a);\n            l1[1] = polygonAt(polygon, b);\n            l2[0] = polygonAt(polygon, i);\n            l2[1] = polygonAt(polygon, i + 1);\n            p = lineInt(l1,l2);\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee2\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee2(polygon, a,b) {\n    // for each edge\n    for (var i = 0; i !== polygon.length; ++i) {\n        // ignore incident edges\n        if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b){\n            continue;\n        }\n        if( lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i+1)) ){\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Copy the polygon from vertex i to vertex j.\n * @method copy\n * @param  {Number} i\n * @param  {Number} j\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\n * @return {Polygon}                The resulting copy.\n */\nfunction polygonCopy(polygon, i,j,targetPoly){\n    var p = targetPoly || [];\n    polygonClear(p);\n    if (i < j) {\n        // Insert all vertices from i to j\n        for(var k=i; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n    } else {\n\n        // Insert vertices 0 to j\n        for(var k=0; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n        // Insert vertices i to end\n        for(var k=i; k<polygon.length; k++){\n            p.push(polygon[k]);\n        }\n    }\n\n    return p;\n}\n\n/**\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\n * @method getCutEdges\n * @return {Array}\n */\nfunction polygonGetCutEdges(polygon) {\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\n    var nDiags = Number.MAX_VALUE;\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(polygon, i)) {\n            for (var j = 0; j < polygon.length; ++j) {\n                if (polygonCanSee(polygon, i, j)) {\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\n\n                    for(var k=0; k<tmp2.length; k++){\n                        tmp1.push(tmp2[k]);\n                    }\n\n                    if (tmp1.length < nDiags) {\n                        min = tmp1;\n                        nDiags = tmp1.length;\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\n                    }\n                }\n            }\n        }\n    }\n\n    return min;\n}\n\n/**\n * Decomposes the polygon into one or more convex sub-Polygons.\n * @method decomp\n * @return {Array} An array or Polygon objects.\n */\nfunction polygonDecomp(polygon){\n    var edges = polygonGetCutEdges(polygon);\n    if(edges.length > 0){\n        return polygonSlice(polygon, edges);\n    } else {\n        return [polygon];\n    }\n}\n\n/**\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\n * @method slice\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\n * @return {Array}\n */\nfunction polygonSlice(polygon, cutEdges){\n    if(cutEdges.length === 0){\n\t\treturn [polygon];\n    }\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\n\n        var polys = [polygon];\n\n        for(var i=0; i<cutEdges.length; i++){\n            var cutEdge = cutEdges[i];\n            // Cut all polys\n            for(var j=0; j<polys.length; j++){\n                var poly = polys[j];\n                var result = polygonSlice(poly, cutEdge);\n                if(result){\n                    // Found poly! Cut and quit\n                    polys.splice(j,1);\n                    polys.push(result[0],result[1]);\n                    break;\n                }\n            }\n        }\n\n        return polys;\n    } else {\n\n        // Was given one edge\n        var cutEdge = cutEdges;\n        var i = polygon.indexOf(cutEdge[0]);\n        var j = polygon.indexOf(cutEdge[1]);\n\n        if(i !== -1 && j !== -1){\n            return [polygonCopy(polygon, i,j),\n                    polygonCopy(polygon, j,i)];\n        } else {\n            return false;\n        }\n    }\n}\n\n/**\n * Checks that the line segments of this polygon do not intersect each other.\n * @method isSimple\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\n * @return {Boolean}\n * @todo Should it check all segments with all others?\n */\nfunction polygonIsSimple(polygon){\n    var path = polygon, i;\n    // Check\n    for(i=0; i<path.length-1; i++){\n        for(var j=0; j<i-1; j++){\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\n                return false;\n            }\n        }\n    }\n\n    // Check the segment between the last and the first point to all others\n    for(i=1; i<path.length-2; i++){\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\n\tdelta = delta || 0;\n\tvar a1 = p2[1] - p1[1];\n\tvar b1 = p1[0] - p2[0];\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\n\tvar a2 = q2[1] - q1[1];\n\tvar b2 = q1[0] - q2[0];\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\n\tvar det = (a1 * b2) - (a2 * b1);\n\n\tif(!scalar_eq(det,0,delta)){\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\n\t} else {\n\t\treturn [0,0];\n    }\n}\n\n/**\n * Quickly decompose the Polygon into convex sub-polygons.\n * @method quickDecomp\n * @param  {Array} result\n * @param  {Array} [reflexVertices]\n * @param  {Array} [steinerPoints]\n * @param  {Number} [delta]\n * @param  {Number} [maxlevel]\n * @param  {Number} [level]\n * @return {Array}\n */\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\n    maxlevel = maxlevel || 100;\n    level = level || 0;\n    delta = delta || 25;\n    result = typeof(result)!==\"undefined\" ? result : [];\n    reflexVertices = reflexVertices || [];\n    steinerPoints = steinerPoints || [];\n\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\n    var lowerPoly=[], upperPoly=[]; // polygons\n    var poly = polygon,\n        v = polygon;\n\n    if(v.length < 3){\n\t\treturn result;\n    }\n\n    level++;\n    if(level > maxlevel){\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\n        return result;\n    }\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(poly, i)) {\n            reflexVertices.push(poly[i]);\n            upperDist = lowerDist = Number.MAX_VALUE;\n\n\n            for (var j = 0; j < polygon.length; ++j) {\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\n                        d = sqdist(poly[i], p);\n                        if (d < lowerDist) { // keep only the closest intersection\n                            lowerDist = d;\n                            lowerInt = p;\n                            lowerIndex = j;\n                        }\n                    }\n                }\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\n                        d = sqdist(poly[i], p);\n                        if (d < upperDist) {\n                            upperDist = d;\n                            upperInt = p;\n                            upperIndex = j;\n                        }\n                    }\n                }\n            }\n\n            // if there are no vertices to connect to, choose a point in the middle\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\n                steinerPoints.push(p);\n\n                if (i < upperIndex) {\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    if (lowerIndex !== 0){\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\n                    }\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\n                        polygonAppend(lowerPoly, poly,i,poly.length);\n                    }\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\n                }\n            } else {\n                // connect to the closest point within the triangle\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\n\n                if (lowerIndex > upperIndex) {\n                    upperIndex += polygon.length;\n                }\n                closestDist = Number.MAX_VALUE;\n\n                if(upperIndex < lowerIndex){\n                    return result;\n                }\n\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\n                    if (\n                        isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) &&\n                        isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))\n                    ) {\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\n                        if (d < closestDist && polygonCanSee2(poly, i, j)) {\n                            closestDist = d;\n                            closestIndex = j % polygon.length;\n                        }\n                    }\n                }\n\n                if (i < closestIndex) {\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\n                    if (closestIndex !== 0){\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\n                    }\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        polygonAppend(lowerPoly, poly,i,v.length);\n                    }\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\n                }\n            }\n\n            // solve smallest poly first\n            if (lowerPoly.length < upperPoly.length) {\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            } else {\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            }\n\n            return result;\n        }\n    }\n    result.push(polygon);\n\n    return result;\n}\n\n/**\n * Remove collinear points in the polygon.\n * @method removeCollinearPoints\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\n * @return {Number}           The number of points removed\n */\nfunction polygonRemoveCollinearPoints(polygon, precision){\n    var num = 0;\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\n            // Remove the middle point\n            polygon.splice(i%polygon.length,1);\n            num++;\n        }\n    }\n    return num;\n}\n\n/**\n * Remove duplicate points in the polygon.\n * @method removeDuplicatePoints\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\n */\nfunction polygonRemoveDuplicatePoints(polygon, precision){\n    for(var i=polygon.length-1; i>=1; --i){\n        var pi = polygon[i];\n        for(var j=i-1; j>=0; --j){\n            if(points_eq(pi, polygon[j], precision)){\n                polygon.splice(i,1);\n                continue;\n            }\n        }\n    }\n}\n\n/**\n * Check if two scalars are equal\n * @static\n * @method eq\n * @param  {Number} a\n * @param  {Number} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction scalar_eq(a,b,precision){\n    precision = precision || 0;\n    return Math.abs(a-b) <= precision;\n}\n\n/**\n * Check if two points are equal\n * @static\n * @method points_eq\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction points_eq(a,b,precision){\n    return scalar_eq(a[0],b[0],precision) && scalar_eq(a[1],b[1],precision);\n}\n","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.physics=t():(e.lampix=e.lampix||{},e.lampix.physics=t())}(window,function(){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,\"a\",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p=\"\",o(o.s=9)}([function(e,t,o){(function(t){var o;e.exports=function e(t,n,r){function i(a,l){if(!n[a]){if(!t[a]){var c=\"function\"==typeof o&&o;if(!l&&c)return o(a,!0);if(s)return s(a,!0);var u=new Error(\"Cannot find module '\"+a+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var d=n[a]={exports:{}};t[a][0].call(d.exports,function(e){var o=t[a][1][e];return i(o||e)},d,d.exports,e,t,n,r)}return n[a].exports}for(var s=\"function\"==typeof o&&o,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vertices\"),i=e(\"../geometry/Vector\"),s=e(\"../core/Sleeping\"),a=(e(\"../render/Render\"),e(\"../core/Common\")),l=e(\"../geometry/Bounds\"),c=e(\"../geometry/Axes\");!function(){n._inertiaScale=4,n._nextCollidingGroupId=1,n._nextNonCollidingGroupId=-1,n._nextCategory=1,n.create=function(t){var o={id:a.nextId(),type:\"body\",label:\"Body\",parts:[],plugin:{},angle:0,vertices:r.fromPath(\"L 0 0 L 40 0 L 40 40 L 0 40\"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:0}},n=a.extend(o,t);return e(n,t),n},n.nextGroup=function(e){return e?n._nextNonCollidingGroupId--:n._nextCollidingGroupId++},n.nextCategory=function(){return n._nextCategory=n._nextCategory<<1,n._nextCategory};var e=function(e,t){t=t||{},n.set(e,{bounds:e.bounds||l.create(e.vertices),positionPrev:e.positionPrev||i.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),r.rotate(e.vertices,e.angle,e.position),c.rotate(e.axes,e.angle),l.update(e.bounds,e.vertices,e.velocity),n.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var o=e.isStatic?\"#2e2b44\":a.choose([\"#006BA6\",\"#0496FF\",\"#FFBC42\",\"#D81159\",\"#8F2D56\"]);e.render.fillStyle=e.render.fillStyle||o,e.render.strokeStyle=e.render.strokeStyle||\"#000\",e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};n.set=function(e,t,o){var r;for(r in\"string\"==typeof t&&(r=t,(t={})[r]=o),t)if(o=t[r],t.hasOwnProperty(r))switch(r){case\"isStatic\":n.setStatic(e,o);break;case\"isSleeping\":s.set(e,o);break;case\"mass\":n.setMass(e,o);break;case\"density\":n.setDensity(e,o);break;case\"inertia\":n.setInertia(e,o);break;case\"vertices\":n.setVertices(e,o);break;case\"position\":n.setPosition(e,o);break;case\"angle\":n.setAngle(e,o);break;case\"velocity\":n.setVelocity(e,o);break;case\"angularVelocity\":n.setAngularVelocity(e,o);break;case\"parts\":n.setParts(e,o);break;default:e[r]=o}},n.setStatic=function(e,t){for(var o=0;o<e.parts.length;o++){var n=e.parts[o];n.isStatic=t,t?(n._original={restitution:n.restitution,friction:n.friction,mass:n.mass,inertia:n.inertia,density:n.density,inverseMass:n.inverseMass,inverseInertia:n.inverseInertia},n.restitution=0,n.friction=1,n.mass=n.inertia=n.density=1/0,n.inverseMass=n.inverseInertia=0,n.positionPrev.x=n.position.x,n.positionPrev.y=n.position.y,n.anglePrev=n.angle,n.angularVelocity=0,n.speed=0,n.angularSpeed=0,n.motion=0):n._original&&(n.restitution=n._original.restitution,n.friction=n._original.friction,n.mass=n._original.mass,n.inertia=n._original.inertia,n.density=n._original.density,n.inverseMass=n._original.inverseMass,n.inverseInertia=n._original.inverseInertia,delete n._original)}},n.setMass=function(e,t){var o=e.inertia/(e.mass/6);e.inertia=o*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},n.setDensity=function(e,t){n.setMass(e,t*e.area),e.density=t},n.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},n.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=r.create(t,e),e.axes=c.fromVertices(e.vertices),e.area=r.area(e.vertices),n.setMass(e,e.density*e.area);var o=r.centre(e.vertices);r.translate(e.vertices,o,-1),n.setInertia(e,n._inertiaScale*r.inertia(e.vertices,e.mass)),r.translate(e.vertices,e.position),l.update(e.bounds,e.vertices,e.velocity)},n.setParts=function(e,t,o){var i;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,i=0;i<t.length;i++){var s=t[i];s!==e&&(s.parent=e,e.parts.push(s))}if(1!==e.parts.length){if(o=void 0===o||o){var a=[];for(i=0;i<t.length;i++)a=a.concat(t[i].vertices);r.clockwiseSort(a);var l=r.hull(a),c=r.centre(l);n.setVertices(e,l),r.translate(e.vertices,c)}var u=n._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,n.setMass(e,u.mass),n.setInertia(e,u.inertia),n.setPosition(e,u.centre)}},n.setPosition=function(e,t){var o=i.sub(t,e.position);e.positionPrev.x+=o.x,e.positionPrev.y+=o.y;for(var n=0;n<e.parts.length;n++){var s=e.parts[n];s.position.x+=o.x,s.position.y+=o.y,r.translate(s.vertices,o),l.update(s.bounds,s.vertices,e.velocity)}},n.setAngle=function(e,t){var o=t-e.angle;e.anglePrev+=o;for(var n=0;n<e.parts.length;n++){var s=e.parts[n];s.angle+=o,r.rotate(s.vertices,o,e.position),c.rotate(s.axes,o),l.update(s.bounds,s.vertices,e.velocity),n>0&&i.rotateAbout(s.position,o,e.position,s.position)}},n.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=i.magnitude(e.velocity)},n.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},n.translate=function(e,t){n.setPosition(e,i.add(e.position,t))},n.rotate=function(e,t,o){if(o){var r=Math.cos(t),i=Math.sin(t),s=e.position.x-o.x,a=e.position.y-o.y;n.setPosition(e,{x:o.x+(s*r-a*i),y:o.y+(s*i+a*r)}),n.setAngle(e,e.angle+t)}else n.setAngle(e,e.angle+t)},n.scale=function(e,t,o,i){var s=0,a=0;i=i||e.position;for(var u=0;u<e.parts.length;u++){var d=e.parts[u];r.scale(d.vertices,t,o,i),d.axes=c.fromVertices(d.vertices),d.area=r.area(d.vertices),n.setMass(d,e.density*d.area),r.translate(d.vertices,{x:-d.position.x,y:-d.position.y}),n.setInertia(d,n._inertiaScale*r.inertia(d.vertices,d.mass)),r.translate(d.vertices,{x:d.position.x,y:d.position.y}),u>0&&(s+=d.area,a+=d.inertia),d.position.x=i.x+(d.position.x-i.x)*t,d.position.y=i.y+(d.position.y-i.y)*o,l.update(d.bounds,d.vertices,e.velocity)}e.parts.length>1&&(e.area=s,e.isStatic||(n.setMass(e,e.density*s),n.setInertia(e,a))),e.circleRadius&&(t===o?e.circleRadius*=t:e.circleRadius=null)},n.update=function(e,t,o,n){var s=Math.pow(t*o*e.timeScale,2),a=1-e.frictionAir*o*e.timeScale,u=e.position.x-e.positionPrev.x,d=e.position.y-e.positionPrev.y;e.velocity.x=u*a*n+e.force.x/e.mass*s,e.velocity.y=d*a*n+e.force.y/e.mass*s,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*a*n+e.torque/e.inertia*s,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=i.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var p=0;p<e.parts.length;p++){var f=e.parts[p];r.translate(f.vertices,e.velocity),p>0&&(f.position.x+=e.velocity.x,f.position.y+=e.velocity.y),0!==e.angularVelocity&&(r.rotate(f.vertices,e.angularVelocity,e.position),c.rotate(f.axes,e.angularVelocity),p>0&&i.rotateAbout(f.position,e.angularVelocity,e.position,f.position)),l.update(f.bounds,f.vertices,e.velocity)}},n.applyForce=function(e,t,o){e.force.x+=o.x,e.force.y+=o.y;var n={x:t.x-e.position.x,y:t.y-e.position.y};e.torque+=n.x*o.y-n.y*o.x},n._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},o=1===e.parts.length?0:1;o<e.parts.length;o++){var n=e.parts[o],r=n.mass!==1/0?n.mass:1;t.mass+=r,t.area+=n.area,t.inertia+=n.inertia,t.centre=i.add(t.centre,i.mult(n.position,r))}return t.centre=i.div(t.centre,t.mass),t}}()},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(e,t,o){var n={};t.exports=n;var r=e(\"../core/Events\"),i=e(\"../core/Common\"),s=e(\"../geometry/Bounds\"),a=e(\"./Body\");n.create=function(e){return i.extend({id:i.nextId(),type:\"composite\",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:\"Composite\",plugin:{}},e)},n.setModified=function(e,t,o,r){if(e.isModified=t,o&&e.parent&&n.setModified(e.parent,t,o,r),r)for(var i=0;i<e.composites.length;i++){var s=e.composites[i];n.setModified(s,t,o,r)}},n.add=function(e,t){var o=[].concat(t);r.trigger(e,\"beforeAdd\",{object:t});for(var s=0;s<o.length;s++){var a=o[s];switch(a.type){case\"body\":if(a.parent!==a){i.warn(\"Composite.add: skipped adding a compound body part (you must add its parent instead)\");break}n.addBody(e,a);break;case\"constraint\":n.addConstraint(e,a);break;case\"composite\":n.addComposite(e,a);break;case\"mouseConstraint\":n.addConstraint(e,a.constraint)}}return r.trigger(e,\"afterAdd\",{object:t}),e},n.remove=function(e,t,o){var i=[].concat(t);r.trigger(e,\"beforeRemove\",{object:t});for(var s=0;s<i.length;s++){var a=i[s];switch(a.type){case\"body\":n.removeBody(e,a,o);break;case\"constraint\":n.removeConstraint(e,a,o);break;case\"composite\":n.removeComposite(e,a,o);break;case\"mouseConstraint\":n.removeConstraint(e,a.constraint)}}return r.trigger(e,\"afterRemove\",{object:t}),e},n.addComposite=function(e,t){return e.composites.push(t),t.parent=e,n.setModified(e,!0,!0,!1),e},n.removeComposite=function(e,t,o){var r=i.indexOf(e.composites,t);if(-1!==r&&(n.removeCompositeAt(e,r),n.setModified(e,!0,!0,!1)),o)for(var s=0;s<e.composites.length;s++)n.removeComposite(e.composites[s],t,!0);return e},n.removeCompositeAt=function(e,t){return e.composites.splice(t,1),n.setModified(e,!0,!0,!1),e},n.addBody=function(e,t){return e.bodies.push(t),n.setModified(e,!0,!0,!1),e},n.removeBody=function(e,t,o){var r=i.indexOf(e.bodies,t);if(-1!==r&&(n.removeBodyAt(e,r),n.setModified(e,!0,!0,!1)),o)for(var s=0;s<e.composites.length;s++)n.removeBody(e.composites[s],t,!0);return e},n.removeBodyAt=function(e,t){return e.bodies.splice(t,1),n.setModified(e,!0,!0,!1),e},n.addConstraint=function(e,t){return e.constraints.push(t),n.setModified(e,!0,!0,!1),e},n.removeConstraint=function(e,t,o){var r=i.indexOf(e.constraints,t);if(-1!==r&&n.removeConstraintAt(e,r),o)for(var s=0;s<e.composites.length;s++)n.removeConstraint(e.composites[s],t,!0);return e},n.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),n.setModified(e,!0,!0,!1),e},n.clear=function(e,t,o){if(o)for(var r=0;r<e.composites.length;r++)n.clear(e.composites[r],t,!0);return t?e.bodies=e.bodies.filter(function(e){return e.isStatic}):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,n.setModified(e,!0,!0,!1),e},n.allBodies=function(e){for(var t=[].concat(e.bodies),o=0;o<e.composites.length;o++)t=t.concat(n.allBodies(e.composites[o]));return t},n.allConstraints=function(e){for(var t=[].concat(e.constraints),o=0;o<e.composites.length;o++)t=t.concat(n.allConstraints(e.composites[o]));return t},n.allComposites=function(e){for(var t=[].concat(e.composites),o=0;o<e.composites.length;o++)t=t.concat(n.allComposites(e.composites[o]));return t},n.get=function(e,t,o){var r,i;switch(o){case\"body\":r=n.allBodies(e);break;case\"constraint\":r=n.allConstraints(e);break;case\"composite\":r=n.allComposites(e).concat(e)}return r?0===(i=r.filter(function(e){return e.id.toString()===t.toString()})).length?null:i[0]:null},n.move=function(e,t,o){return n.remove(e,t),n.add(o,t),e},n.rebase=function(e){for(var t=n.allBodies(e).concat(n.allConstraints(e)).concat(n.allComposites(e)),o=0;o<t.length;o++)t[o].id=i.nextId();return n.setModified(e,!0,!0,!1),e},n.translate=function(e,t,o){for(var r=o?n.allBodies(e):e.bodies,i=0;i<r.length;i++)a.translate(r[i],t);return n.setModified(e,!0,!0,!1),e},n.rotate=function(e,t,o,r){for(var i=Math.cos(t),s=Math.sin(t),l=r?n.allBodies(e):e.bodies,c=0;c<l.length;c++){var u=l[c],d=u.position.x-o.x,p=u.position.y-o.y;a.setPosition(u,{x:o.x+(d*i-p*s),y:o.y+(d*s+p*i)}),a.rotate(u,t)}return n.setModified(e,!0,!0,!1),e},n.scale=function(e,t,o,r,i){for(var s=i?n.allBodies(e):e.bodies,l=0;l<s.length;l++){var c=s[l],u=c.position.x-r.x,d=c.position.y-r.y;a.setPosition(c,{x:r.x+u*t,y:r.y+d*o}),a.scale(c,t,o)}return n.setModified(e,!0,!0,!1),e},n.bounds=function(e){for(var t=n.allBodies(e),o=[],r=0;r<t.length;r+=1){var i=t[r];o.push(i.bounds.min,i.bounds.max)}return s.create(o)}},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Composite\"),i=(e(\"../constraint/Constraint\"),e(\"../core/Common\"));n.create=function(e){var t=r.create(),o={label:\"World\",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}};return i.extend(t,o,e)}},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(e,t,o){var n={};t.exports=n,n.create=function(e){return{id:n.id(e),vertex:e,normalImpulse:0,tangentImpulse:0}},n.id=function(e){return e.body.id+\"_\"+e.index}},{}],5:[function(e,t,o){var n={};t.exports=n;var r=e(\"./SAT\"),i=e(\"./Pair\"),s=e(\"../geometry/Bounds\");n.collisions=function(e,t){for(var o=[],a=t.pairs.table,l=0;l<e.length;l++){var c=e[l][0],u=e[l][1];if((!c.isStatic&&!c.isSleeping||!u.isStatic&&!u.isSleeping)&&n.canCollide(c.collisionFilter,u.collisionFilter)&&s.overlaps(c.bounds,u.bounds))for(var d=c.parts.length>1?1:0;d<c.parts.length;d++)for(var p=c.parts[d],f=u.parts.length>1?1:0;f<u.parts.length;f++){var v=u.parts[f];if(p===c&&v===u||s.overlaps(p.bounds,v.bounds)){var y,m=i.id(p,v),g=a[m];y=g&&g.isActive?g.collision:null;var h=r.collides(p,v,y);h.collided&&o.push(h)}}}return o},n.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)}},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Pair\"),i=e(\"./Detector\"),s=e(\"../core/Common\");n.create=function(e){var t={controller:n,detector:i.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return s.extend(t,e)},n.update=function(e,t,o,r){var i,s,a,l,c,u=o.world,d=e.buckets,p=!1;for(i=0;i<t.length;i++){var f=t[i];if((!f.isSleeping||r)&&!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y)){var v=n._getRegion(e,f);if(!f.region||v.id!==f.region.id||r){f.region&&!r||(f.region=v);var y=n._regionUnion(v,f.region);for(s=y.startCol;s<=y.endCol;s++)for(a=y.startRow;a<=y.endRow;a++){c=n._getBucketId(s,a),l=d[c];var m=s>=v.startCol&&s<=v.endCol&&a>=v.startRow&&a<=v.endRow,g=s>=f.region.startCol&&s<=f.region.endCol&&a>=f.region.startRow&&a<=f.region.endRow;!m&&g&&g&&l&&n._bucketRemoveBody(e,l,f),(f.region===v||m&&!g||r)&&(l||(l=n._createBucket(d,c)),n._bucketAddBody(e,l,f))}f.region=v,p=!0}}}p&&(e.pairsList=n._createActivePairsList(e))},n.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},n._regionUnion=function(e,t){var o=Math.min(e.startCol,t.startCol),r=Math.max(e.endCol,t.endCol),i=Math.min(e.startRow,t.startRow),s=Math.max(e.endRow,t.endRow);return n._createRegion(o,r,i,s)},n._getRegion=function(e,t){var o=t.bounds,r=Math.floor(o.min.x/e.bucketWidth),i=Math.floor(o.max.x/e.bucketWidth),s=Math.floor(o.min.y/e.bucketHeight),a=Math.floor(o.max.y/e.bucketHeight);return n._createRegion(r,i,s,a)},n._createRegion=function(e,t,o,n){return{id:e+\",\"+t+\",\"+o+\",\"+n,startCol:e,endCol:t,startRow:o,endRow:n}},n._getBucketId=function(e,t){return\"C\"+e+\"R\"+t},n._createBucket=function(e,t){var o=e[t]=[];return o},n._bucketAddBody=function(e,t,o){for(var n=0;n<t.length;n++){var i=t[n];if(!(o.id===i.id||o.isStatic&&i.isStatic)){var s=r.id(o,i),a=e.pairs[s];a?a[2]+=1:e.pairs[s]=[o,i,1]}}t.push(o)},n._bucketRemoveBody=function(e,t,o){t.splice(s.indexOf(t,o),1);for(var n=0;n<t.length;n++){var i=t[n],a=r.id(o,i),l=e.pairs[a];l&&(l[2]-=1)}},n._createActivePairsList=function(e){var t,o,n=[];t=s.keys(e.pairs);for(var r=0;r<t.length;r++)(o=e.pairs[t[r]])[2]>0?n.push(o):delete e.pairs[t[r]];return n}},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Contact\");n.create=function(e,t){var o=e.bodyA,r=e.bodyB,i=e.parentA,s=e.parentB,a={id:n.id(o,r),bodyA:o,bodyB:r,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:o.isSensor||r.isSensor,timeCreated:t,timeUpdated:t,inverseMass:i.inverseMass+s.inverseMass,friction:Math.min(i.friction,s.friction),frictionStatic:Math.max(i.frictionStatic,s.frictionStatic),restitution:Math.max(i.restitution,s.restitution),slop:Math.max(i.slop,s.slop)};return n.update(a,e,t),a},n.update=function(e,t,o){var i=e.contacts,s=t.supports,a=e.activeContacts,l=t.parentA,c=t.parentB;if(e.collision=t,e.inverseMass=l.inverseMass+c.inverseMass,e.friction=Math.min(l.friction,c.friction),e.frictionStatic=Math.max(l.frictionStatic,c.frictionStatic),e.restitution=Math.max(l.restitution,c.restitution),e.slop=Math.max(l.slop,c.slop),a.length=0,t.collided){for(var u=0;u<s.length;u++){var d=s[u],p=r.id(d),f=i[p];f?a.push(f):a.push(i[p]=r.create(d))}e.separation=t.depth,n.setActive(e,!0,o)}else!0===e.isActive&&n.setActive(e,!1,o)},n.setActive=function(e,t,o){t?(e.isActive=!0,e.timeUpdated=o):(e.isActive=!1,e.activeContacts.length=0)},n.id=function(e,t){return e.id<t.id?\"A\"+e.id+\"B\"+t.id:\"A\"+t.id+\"B\"+e.id}},{\"./Contact\":4}],8:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Pair\"),i=e(\"../core/Common\");n._pairMaxIdleLife=1e3,n.create=function(e){return i.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},n.update=function(e,t,o){var n,s,a,l,c=e.list,u=e.table,d=e.collisionStart,p=e.collisionEnd,f=e.collisionActive,v=[];for(d.length=0,p.length=0,f.length=0,l=0;l<t.length;l++)(n=t[l]).collided&&(s=r.id(n.bodyA,n.bodyB),v.push(s),(a=u[s])?(a.isActive?f.push(a):d.push(a),r.update(a,n,o)):(a=r.create(n,o),u[s]=a,d.push(a),c.push(a)));for(l=0;l<c.length;l++)(a=c[l]).isActive&&-1===i.indexOf(v,a.id)&&(r.setActive(a,!1,o),p.push(a))},n.removeOld=function(e,t){var o,r,i,s,a=e.list,l=e.table,c=[];for(s=0;s<a.length;s++)o=a[s],(r=o.collision).bodyA.isSleeping||r.bodyB.isSleeping?o.timeUpdated=t:t-o.timeUpdated>n._pairMaxIdleLife&&c.push(s);for(s=0;s<c.length;s++)i=c[s]-s,o=a[i],delete l[o.id],a.splice(i,1)},n.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},{\"../core/Common\":14,\"./Pair\":7}],9:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vector\"),i=e(\"./SAT\"),s=e(\"../geometry/Bounds\"),a=e(\"../factory/Bodies\"),l=e(\"../geometry/Vertices\");n.collides=function(e,t){for(var o=[],n=0;n<t.length;n++){var r=t[n];if(s.overlaps(r.bounds,e.bounds))for(var a=1===r.parts.length?0:1;a<r.parts.length;a++){var l=r.parts[a];if(s.overlaps(l.bounds,e.bounds)){var c=i.collides(l,e);if(c.collided){o.push(c);break}}}}return o},n.ray=function(e,t,o,i){i=i||1e-100;for(var s=r.angle(t,o),l=r.magnitude(r.sub(t,o)),c=.5*(o.x+t.x),u=.5*(o.y+t.y),d=a.rectangle(c,u,l,i,{angle:s}),p=n.collides(d,e),f=0;f<p.length;f+=1){var v=p[f];v.body=v.bodyB=v.bodyA}return p},n.region=function(e,t,o){for(var n=[],r=0;r<e.length;r++){var i=e[r],a=s.overlaps(i.bounds,t);(a&&!o||!a&&o)&&n.push(i)}return n},n.point=function(e,t){for(var o=[],n=0;n<e.length;n++){var r=e[n];if(s.contains(r.bounds,t))for(var i=1===r.parts.length?0:1;i<r.parts.length;i++){var a=r.parts[i];if(s.contains(a.bounds,t)&&l.contains(a.vertices,t)){o.push(r);break}}}return o}},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vertices\"),i=e(\"../geometry/Vector\"),s=e(\"../core/Common\"),a=e(\"../geometry/Bounds\");n._restingThresh=4,n._restingThreshTangent=6,n._positionDampen=.9,n._positionWarming=.8,n._frictionNormalMultiplier=5,n.preSolvePosition=function(e){var t,o,n;for(t=0;t<e.length;t++)(o=e[t]).isActive&&(n=o.activeContacts.length,o.collision.parentA.totalContacts+=n,o.collision.parentB.totalContacts+=n)},n.solvePosition=function(e,t){var o,r,s,a,l,c,u,d,p,f=i._temp[0],v=i._temp[1],y=i._temp[2],m=i._temp[3];for(o=0;o<e.length;o++)(r=e[o]).isActive&&!r.isSensor&&(s=r.collision,a=s.parentA,l=s.parentB,c=s.normal,u=i.sub(i.add(l.positionImpulse,l.position,f),i.add(a.positionImpulse,i.sub(l.position,s.penetration,v),y),m),r.separation=i.dot(c,u));for(o=0;o<e.length;o++)(r=e[o]).isActive&&!r.isSensor&&(s=r.collision,a=s.parentA,l=s.parentB,c=s.normal,p=(r.separation-r.slop)*t,(a.isStatic||l.isStatic)&&(p*=2),a.isStatic||a.isSleeping||(d=n._positionDampen/a.totalContacts,a.positionImpulse.x+=c.x*p*d,a.positionImpulse.y+=c.y*p*d),l.isStatic||l.isSleeping||(d=n._positionDampen/l.totalContacts,l.positionImpulse.x-=c.x*p*d,l.positionImpulse.y-=c.y*p*d))},n.postSolvePosition=function(e){for(var t=0;t<e.length;t++){var o=e[t];if(o.totalContacts=0,0!==o.positionImpulse.x||0!==o.positionImpulse.y){for(var s=0;s<o.parts.length;s++){var l=o.parts[s];r.translate(l.vertices,o.positionImpulse),a.update(l.bounds,l.vertices,o.velocity),l.position.x+=o.positionImpulse.x,l.position.y+=o.positionImpulse.y}o.positionPrev.x+=o.positionImpulse.x,o.positionPrev.y+=o.positionImpulse.y,i.dot(o.positionImpulse,o.velocity)<0?(o.positionImpulse.x=0,o.positionImpulse.y=0):(o.positionImpulse.x*=n._positionWarming,o.positionImpulse.y*=n._positionWarming)}}},n.preSolveVelocity=function(e){var t,o,n,r,s,a,l,c,u,d,p,f,v,y,m=i._temp[0],g=i._temp[1];for(t=0;t<e.length;t++)if((n=e[t]).isActive&&!n.isSensor)for(r=n.activeContacts,s=n.collision,a=s.parentA,l=s.parentB,c=s.normal,u=s.tangent,o=0;o<r.length;o++)d=r[o],p=d.vertex,f=d.normalImpulse,v=d.tangentImpulse,0===f&&0===v||(m.x=c.x*f+u.x*v,m.y=c.y*f+u.y*v,a.isStatic||a.isSleeping||(y=i.sub(p,a.position,g),a.positionPrev.x+=m.x*a.inverseMass,a.positionPrev.y+=m.y*a.inverseMass,a.anglePrev+=i.cross(y,m)*a.inverseInertia),l.isStatic||l.isSleeping||(y=i.sub(p,l.position,g),l.positionPrev.x-=m.x*l.inverseMass,l.positionPrev.y-=m.y*l.inverseMass,l.anglePrev-=i.cross(y,m)*l.inverseInertia))},n.solveVelocity=function(e,t){for(var o=t*t,r=i._temp[0],a=i._temp[1],l=i._temp[2],c=i._temp[3],u=i._temp[4],d=i._temp[5],p=0;p<e.length;p++){var f=e[p];if(f.isActive&&!f.isSensor){var v=f.collision,y=v.parentA,m=v.parentB,g=v.normal,h=v.tangent,x=f.activeContacts,b=1/x.length;y.velocity.x=y.position.x-y.positionPrev.x,y.velocity.y=y.position.y-y.positionPrev.y,m.velocity.x=m.position.x-m.positionPrev.x,m.velocity.y=m.position.y-m.positionPrev.y,y.angularVelocity=y.angle-y.anglePrev,m.angularVelocity=m.angle-m.anglePrev;for(var w=0;w<x.length;w++){var S=x[w],M=S.vertex,_=i.sub(M,y.position,a),P=i.sub(M,m.position,l),C=i.add(y.velocity,i.mult(i.perp(_),y.angularVelocity),c),A=i.add(m.velocity,i.mult(i.perp(P),m.angularVelocity),u),O=i.sub(C,A,d),B=i.dot(g,O),I=i.dot(h,O),k=Math.abs(I),T=s.sign(I),j=(1+f.restitution)*B,R=s.clamp(f.separation+B,0,1)*n._frictionNormalMultiplier,V=I,E=1/0;k>f.friction*f.frictionStatic*R*o&&(E=k,V=s.clamp(f.friction*T*o,-E,E));var F=i.cross(_,g),W=i.cross(P,g),L=b/(y.inverseMass+m.inverseMass+y.inverseInertia*F*F+m.inverseInertia*W*W);if(j*=L,V*=L,B<0&&B*B>n._restingThresh*o)S.normalImpulse=0;else{var D=S.normalImpulse;S.normalImpulse=Math.min(S.normalImpulse+j,0),j=S.normalImpulse-D}if(I*I>n._restingThreshTangent*o)S.tangentImpulse=0;else{var q=S.tangentImpulse;S.tangentImpulse=s.clamp(S.tangentImpulse+V,-E,E),V=S.tangentImpulse-q}r.x=g.x*j+h.x*V,r.y=g.y*j+h.y*V,y.isStatic||y.isSleeping||(y.positionPrev.x+=r.x*y.inverseMass,y.positionPrev.y+=r.y*y.inverseMass,y.anglePrev+=i.cross(_,r)*y.inverseInertia),m.isStatic||m.isSleeping||(m.positionPrev.x-=r.x*m.inverseMass,m.positionPrev.y-=r.y*m.inverseMass,m.anglePrev-=i.cross(P,r)*m.inverseInertia)}}}}},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vertices\"),i=e(\"../geometry/Vector\");n.collides=function(e,t,o){var s,a,l,c,u=!1;if(o){var d=e.parent,p=t.parent,f=d.speed*d.speed+d.angularSpeed*d.angularSpeed+p.speed*p.speed+p.angularSpeed*p.angularSpeed;u=o&&o.collided&&f<.2,c=o}else c={collided:!1,bodyA:e,bodyB:t};if(o&&u){var v=c.axisBody,y=v===e?t:e,m=[v.axes[o.axisNumber]];if(l=n._overlapAxes(v.vertices,y.vertices,m),c.reused=!0,l.overlap<=0)return c.collided=!1,c}else{if((s=n._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return c.collided=!1,c;if((a=n._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return c.collided=!1,c;s.overlap<a.overlap?(l=s,c.axisBody=e):(l=a,c.axisBody=t),c.axisNumber=l.axisNumber}c.bodyA=e.id<t.id?e:t,c.bodyB=e.id<t.id?t:e,c.collided=!0,c.depth=l.overlap,c.parentA=c.bodyA.parent,c.parentB=c.bodyB.parent,e=c.bodyA,t=c.bodyB,i.dot(l.axis,i.sub(t.position,e.position))<0?c.normal={x:l.axis.x,y:l.axis.y}:c.normal={x:-l.axis.x,y:-l.axis.y},c.tangent=i.perp(c.normal),c.penetration=c.penetration||{},c.penetration.x=c.normal.x*c.depth,c.penetration.y=c.normal.y*c.depth;var g=n._findSupports(e,t,c.normal),h=[];if(r.contains(e.vertices,g[0])&&h.push(g[0]),r.contains(e.vertices,g[1])&&h.push(g[1]),h.length<2){var x=n._findSupports(t,e,i.neg(c.normal));r.contains(t.vertices,x[0])&&h.push(x[0]),h.length<2&&r.contains(t.vertices,x[1])&&h.push(x[1])}return h.length<1&&(h=[g[0]]),c.supports=h,c},n._overlapAxes=function(e,t,o){for(var r,s,a=i._temp[0],l=i._temp[1],c={overlap:Number.MAX_VALUE},u=0;u<o.length;u++){if(s=o[u],n._projectToAxis(a,e,s),n._projectToAxis(l,t,s),(r=Math.min(a.max-l.min,l.max-a.min))<=0)return c.overlap=r,c;r<c.overlap&&(c.overlap=r,c.axis=s,c.axisNumber=u)}return c},n._projectToAxis=function(e,t,o){for(var n=i.dot(t[0],o),r=n,s=1;s<t.length;s+=1){var a=i.dot(t[s],o);a>r?r=a:a<n&&(n=a)}e.min=n,e.max=r},n._findSupports=function(e,t,o){for(var n,r,s,a,l=Number.MAX_VALUE,c=i._temp[0],u=t.vertices,d=e.position,p=0;p<u.length;p++)r=u[p],c.x=r.x-d.x,c.y=r.y-d.y,(n=-i.dot(o,c))<l&&(l=n,s=r);var f=s.index-1>=0?s.index-1:u.length-1;r=u[f],c.x=r.x-d.x,c.y=r.y-d.y,l=-i.dot(o,c),a=r;var v=(s.index+1)%u.length;return r=u[v],c.x=r.x-d.x,c.y=r.y-d.y,(n=-i.dot(o,c))<l&&(a=r),[s,a]}},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vertices\"),i=e(\"../geometry/Vector\"),s=e(\"../core/Sleeping\"),a=e(\"../geometry/Bounds\"),l=e(\"../geometry/Axes\"),c=e(\"../core/Common\");n._warming=.4,n._torqueDampen=1,n._minLength=1e-6,n.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var o=t.bodyA?i.add(t.bodyA.position,t.pointA):t.pointA,n=t.bodyB?i.add(t.bodyB.position,t.pointB):t.pointB,r=i.magnitude(i.sub(o,n));t.length=void 0!==t.length?t.length:r,t.id=t.id||c.nextId(),t.label=t.label||\"Constraint\",t.type=\"constraint\",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var s={visible:!0,lineWidth:2,strokeStyle:\"#ffffff\",type:\"line\",anchors:!0};return 0===t.length&&t.stiffness>.1?(s.type=\"pin\",s.anchors=!1):t.stiffness<.9&&(s.type=\"spring\"),t.render=c.extend(s,t.render),t},n.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var o=e[t],n=o.constraintImpulse;o.isStatic||0===n.x&&0===n.y&&0===n.angle||(o.position.x+=n.x,o.position.y+=n.y,o.angle+=n.angle)}},n.solveAll=function(e,t){for(var o=0;o<e.length;o+=1){var r=e[o],i=!r.bodyA||r.bodyA&&r.bodyA.isStatic,s=!r.bodyB||r.bodyB&&r.bodyB.isStatic;(i||s)&&n.solve(e[o],t)}for(o=0;o<e.length;o+=1)r=e[o],i=!r.bodyA||r.bodyA&&r.bodyA.isStatic,s=!r.bodyB||r.bodyB&&r.bodyB.isStatic,i||s||n.solve(e[o],t)},n.solve=function(e,t){var o=e.bodyA,r=e.bodyB,s=e.pointA,a=e.pointB;if(o||r){o&&!o.isStatic&&(i.rotate(s,o.angle-e.angleA,s),e.angleA=o.angle),r&&!r.isStatic&&(i.rotate(a,r.angle-e.angleB,a),e.angleB=r.angle);var l=s,c=a;if(o&&(l=i.add(o.position,s)),r&&(c=i.add(r.position,a)),l&&c){var u=i.sub(l,c),d=i.magnitude(u);d<n._minLength&&(d=n._minLength);var p,f,v,y,m,g=(d-e.length)/d,h=e.stiffness<1?e.stiffness*t:e.stiffness,x=i.mult(u,g*h),b=(o?o.inverseMass:0)+(r?r.inverseMass:0),w=(o?o.inverseInertia:0)+(r?r.inverseInertia:0),S=b+w;if(e.damping){var M=i.create();v=i.div(u,d),m=i.sub(r&&i.sub(r.position,r.positionPrev)||M,o&&i.sub(o.position,o.positionPrev)||M),y=i.dot(v,m)}o&&!o.isStatic&&(f=o.inverseMass/b,o.constraintImpulse.x-=x.x*f,o.constraintImpulse.y-=x.y*f,o.position.x-=x.x*f,o.position.y-=x.y*f,e.damping&&(o.positionPrev.x-=e.damping*v.x*y*f,o.positionPrev.y-=e.damping*v.y*y*f),p=i.cross(s,x)/S*n._torqueDampen*o.inverseInertia*(1-e.angularStiffness),o.constraintImpulse.angle-=p,o.angle-=p),r&&!r.isStatic&&(f=r.inverseMass/b,r.constraintImpulse.x+=x.x*f,r.constraintImpulse.y+=x.y*f,r.position.x+=x.x*f,r.position.y+=x.y*f,e.damping&&(r.positionPrev.x+=e.damping*v.x*y*f,r.positionPrev.y+=e.damping*v.y*y*f),p=i.cross(a,x)/S*n._torqueDampen*r.inverseInertia*(1-e.angularStiffness),r.constraintImpulse.angle+=p,r.angle+=p)}}},n.postSolveAll=function(e){for(var t=0;t<e.length;t++){var o=e[t],c=o.constraintImpulse;if(!(o.isStatic||0===c.x&&0===c.y&&0===c.angle)){s.set(o,!1);for(var u=0;u<o.parts.length;u++){var d=o.parts[u];r.translate(d.vertices,c),u>0&&(d.position.x+=c.x,d.position.y+=c.y),0!==c.angle&&(r.rotate(d.vertices,c.angle,o.position),l.rotate(d.axes,c.angle),u>0&&i.rotateAbout(d.position,c.angle,o.position,d.position)),a.update(d.bounds,d.vertices,o.velocity)}c.angle*=n._warming,c.x*=n._warming,c.y*=n._warming}}}},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vertices\"),i=e(\"../core/Sleeping\"),s=e(\"../core/Mouse\"),a=e(\"../core/Events\"),l=e(\"../collision/Detector\"),c=e(\"./Constraint\"),u=e(\"../body/Composite\"),d=e(\"../core/Common\"),p=e(\"../geometry/Bounds\");n.create=function(e,t){var o=(e?e.mouse:null)||(t?t.mouse:null);o||(e&&e.render&&e.render.canvas?o=s.create(e.render.canvas):t&&t.element?o=s.create(t.element):(o=s.create(),d.warn(\"MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected\")));var r=c.create({label:\"Mouse Constraint\",pointA:o.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:\"#90EE90\",lineWidth:3}}),i={type:\"mouseConstraint\",mouse:o,element:null,body:null,constraint:r,collisionFilter:{category:1,mask:4294967295,group:0}},l=d.extend(i,t);return a.on(e,\"beforeUpdate\",function(){var t=u.allBodies(e.world);n.update(l,t),n._triggerEvents(l)}),l},n.update=function(e,t){var o=e.mouse,n=e.constraint,s=e.body;if(0===o.button){if(n.bodyB)i.set(n.bodyB,!1),n.pointA=o.position;else for(var c=0;c<t.length;c++)if(s=t[c],p.contains(s.bounds,o.position)&&l.canCollide(s.collisionFilter,e.collisionFilter))for(var u=s.parts.length>1?1:0;u<s.parts.length;u++){var d=s.parts[u];if(r.contains(d.vertices,o.position)){n.pointA=o.position,n.bodyB=e.body=s,n.pointB={x:o.position.x-s.position.x,y:o.position.y-s.position.y},n.angleB=s.angle,i.set(s,!1),a.trigger(e,\"startdrag\",{mouse:o,body:s});break}}}else n.bodyB=e.body=null,n.pointB=null,s&&a.trigger(e,\"enddrag\",{mouse:o,body:s})},n._triggerEvents=function(e){var t=e.mouse,o=t.sourceEvents;o.mousemove&&a.trigger(e,\"mousemove\",{mouse:t}),o.mousedown&&a.trigger(e,\"mousedown\",{mouse:t}),o.mouseup&&a.trigger(e,\"mouseup\",{mouse:t}),s.clearSourceEvents(t)}},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(e,o,n){(function(t){var n={};o.exports=n,function(){n._nextId=0,n._seed=0,n._nowStartTime=+new Date,n.extend=function(e,t){var o,r;\"boolean\"==typeof t?(o=2,r=t):(o=1,r=!0);for(var i=o;i<arguments.length;i++){var s=arguments[i];if(s)for(var a in s)r&&s[a]&&s[a].constructor===Object?e[a]&&e[a].constructor!==Object?e[a]=s[a]:(e[a]=e[a]||{},n.extend(e[a],r,s[a])):e[a]=s[a]}return e},n.clone=function(e,t){return n.extend({},t,e)},n.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var o in e)t.push(o);return t},n.values=function(e){var t=[];if(Object.keys){for(var o=Object.keys(e),n=0;n<o.length;n++)t.push(e[o[n]]);return t}for(var r in e)t.push(e[r]);return t},n.get=function(e,t,o,n){t=t.split(\".\").slice(o,n);for(var r=0;r<t.length;r+=1)e=e[t[r]];return e},n.set=function(e,t,o,r,i){var s=t.split(\".\").slice(r,i);return n.get(e,t,0,-1)[s[s.length-1]]=o,o},n.shuffle=function(e){for(var t=e.length-1;t>0;t--){var o=Math.floor(n.random()*(t+1)),r=e[t];e[t]=e[o],e[o]=r}return e},n.choose=function(e){return e[Math.floor(n.random()*e.length)]},n.isElement=function(e){return\"undefined\"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},n.isArray=function(e){return\"[object Array]\"===Object.prototype.toString.call(e)},n.isFunction=function(e){return\"function\"==typeof e},n.isPlainObject=function(e){return\"object\"==typeof e&&e.constructor===Object},n.isString=function(e){return\"[object String]\"===toString.call(e)},n.clamp=function(e,t,o){return e<t?t:e>o?o:e},n.sign=function(e){return e<0?-1:1},n.now=function(){if(window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return new Date-n._nowStartTime},n.random=function(e,t){return e=void 0!==e?e:0,t=void 0!==t?t:1,e+o()*(t-e)};var o=function(){return n._seed=(9301*n._seed+49297)%233280,n._seed/233280};n.colorToNumber=function(e){return 3==(e=e.replace(\"#\",\"\")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},n.logLevel=1,n.log=function(){console&&n.logLevel>0&&n.logLevel<=3&&console.log.apply(console,[\"matter-js:\"].concat(Array.prototype.slice.call(arguments)))},n.info=function(){console&&n.logLevel>0&&n.logLevel<=2&&console.info.apply(console,[\"matter-js:\"].concat(Array.prototype.slice.call(arguments)))},n.warn=function(){console&&n.logLevel>0&&n.logLevel<=3&&console.warn.apply(console,[\"matter-js:\"].concat(Array.prototype.slice.call(arguments)))},n.nextId=function(){return n._nextId++},n.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var o=0;o<e.length;o++)if(e[o]===t)return o;return-1},n.map=function(e,t){if(e.map)return e.map(t);for(var o=[],n=0;n<e.length;n+=1)o.push(t(e[n]));return o},n.topologicalSort=function(e){var t=[],o=[],r=[];for(var i in e)o[i]||r[i]||n._topologicalSort(i,o,r,e,t);return t},n._topologicalSort=function(e,t,o,r,i){var s=r[e]||[];o[e]=!0;for(var a=0;a<s.length;a+=1){var l=s[a];o[l]||t[l]||n._topologicalSort(l,t,o,r,i)}o[e]=!1,t[e]=!0,i.push(e)},n.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var o=arguments[t];o._chained?e.push.apply(e,o._chained):e.push(o)}var n=function(){for(var t,o=new Array(arguments.length),n=0,r=arguments.length;n<r;n++)o[n]=arguments[n];for(n=0;n<e.length;n+=1){var i=e[n].apply(t,o);void 0!==i&&(t=i)}return t};return n._chained=e,n},n.chainPathBefore=function(e,t,o){return n.set(e,t,n.chain(o,n.get(e,t)))},n.chainPathAfter=function(e,t,o){return n.set(e,t,n.chain(n.get(e,t),o))},n._requireGlobal=function(o,n){var r=\"undefined\"!=typeof window?window[o]:void 0!==t?t[o]:null;return r||e(n)}}()}).call(this,void 0!==t?t:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],15:[function(e,t,o){var n={};t.exports=n;var r=e(\"../body/World\"),i=e(\"./Sleeping\"),s=e(\"../collision/Resolver\"),a=e(\"../render/Render\"),l=e(\"../collision/Pairs\"),c=(e(\"./Metrics\"),e(\"../collision/Grid\")),u=e(\"./Events\"),d=e(\"../body/Composite\"),p=e(\"../constraint/Constraint\"),f=e(\"./Common\"),v=e(\"../body/Body\");n.create=function(e,t){t=f.isElement(e)?t:e,e=f.isElement(e)?e:null,t=t||{},(e||t.render)&&f.warn(\"Engine.create: engine.render is deprecated (see docs)\");var o={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},timing:{timestamp:0,timeScale:1},broadphase:{controller:c}},n=f.extend(o,t);if(e||n.render){var i={element:e,controller:a};n.render=f.extend(i,n.render)}return n.render&&n.render.controller&&(n.render=n.render.controller.create(n.render)),n.render&&(n.render.engine=n),n.world=t.world||r.create(n.world),n.pairs=l.create(),n.broadphase=n.broadphase.controller.create(n.broadphase),n.metrics=n.metrics||{extended:!1},n},n.update=function(e,t,o){t=t||1e3/60,o=o||1;var r,a=e.world,c=e.timing,f=e.broadphase,v=[];c.timestamp+=t*c.timeScale;var y={timestamp:c.timestamp};u.trigger(e,\"beforeUpdate\",y);var m=d.allBodies(a),g=d.allConstraints(a);for(e.enableSleeping&&i.update(m,c.timeScale),n._bodiesApplyGravity(m,a.gravity),n._bodiesUpdate(m,t,c.timeScale,o,a.bounds),p.preSolveAll(m),r=0;r<e.constraintIterations;r++)p.solveAll(g,c.timeScale);p.postSolveAll(m),f.controller?(a.isModified&&f.controller.clear(f),f.controller.update(f,m,e,a.isModified),v=f.pairsList):v=m,a.isModified&&d.setModified(a,!1,!1,!0);var h=f.detector(v,e),x=e.pairs,b=c.timestamp;for(l.update(x,h,b),l.removeOld(x,b),e.enableSleeping&&i.afterCollisions(x.list,c.timeScale),x.collisionStart.length>0&&u.trigger(e,\"collisionStart\",{pairs:x.collisionStart}),s.preSolvePosition(x.list),r=0;r<e.positionIterations;r++)s.solvePosition(x.list,c.timeScale);for(s.postSolvePosition(m),p.preSolveAll(m),r=0;r<e.constraintIterations;r++)p.solveAll(g,c.timeScale);for(p.postSolveAll(m),s.preSolveVelocity(x.list),r=0;r<e.velocityIterations;r++)s.solveVelocity(x.list,c.timeScale);return x.collisionActive.length>0&&u.trigger(e,\"collisionActive\",{pairs:x.collisionActive}),x.collisionEnd.length>0&&u.trigger(e,\"collisionEnd\",{pairs:x.collisionEnd}),n._bodiesClearForces(m),u.trigger(e,\"afterUpdate\",y),e},n.merge=function(e,t){if(f.extend(e,t),t.world){e.world=t.world,n.clear(e);for(var o=d.allBodies(e.world),r=0;r<o.length;r++){var s=o[r];i.set(s,!1),s.id=f.nextId()}}},n.clear=function(e){var t=e.world;l.clear(e.pairs);var o=e.broadphase;if(o.controller){var n=d.allBodies(t);o.controller.clear(o),o.controller.update(o,n,e,!0)}},n._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var o=e[t];o.force.x=0,o.force.y=0,o.torque=0}},n._bodiesApplyGravity=function(e,t){var o=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==o)for(var n=0;n<e.length;n++){var r=e[n];r.isStatic||r.isSleeping||(r.force.y+=r.mass*t.y*o,r.force.x+=r.mass*t.x*o)}},n._bodiesUpdate=function(e,t,o,n,r){for(var i=0;i<e.length;i++){var s=e[i];s.isStatic||s.isSleeping||v.update(s,t,o,n)}}},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Common\");n.on=function(e,t,o){for(var n,r=t.split(\" \"),i=0;i<r.length;i++)n=r[i],e.events=e.events||{},e.events[n]=e.events[n]||[],e.events[n].push(o);return o},n.off=function(e,t,o){if(t){\"function\"==typeof t&&(o=t,t=r.keys(e.events).join(\" \"));for(var n=t.split(\" \"),i=0;i<n.length;i++){var s=e.events[n[i]],a=[];if(o&&s)for(var l=0;l<s.length;l++)s[l]!==o&&a.push(s[l]);e.events[n[i]]=a}}else e.events={}},n.trigger=function(e,t,o){var n,i,s,a;if(e.events){o||(o={}),n=t.split(\" \");for(var l=0;l<n.length;l++)if(i=n[l],s=e.events[i]){(a=r.clone(o,!1)).name=i,a.source=e;for(var c=0;c<s.length;c++)s[c].apply(e,[a])}}}},{\"./Common\":14}],17:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Plugin\"),i=e(\"./Common\");n.name=\"matter-js\",n.version=\"0.14.2\",n.uses=[],n.used=[],n.use=function(){r.use(n,Array.prototype.slice.call(arguments))},n.before=function(e,t){return e=e.replace(/^Matter./,\"\"),i.chainPathBefore(n,e,t)},n.after=function(e,t){return e=e.replace(/^Matter./,\"\"),i.chainPathAfter(n,e,t)}},{\"./Common\":14,\"./Plugin\":20}],18:[function(e,t,o){},{\"../body/Composite\":2,\"./Common\":14}],19:[function(e,t,o){var n={};t.exports=n;var r=e(\"../core/Common\");n.create=function(e){var t={};return e||r.log(\"Mouse.create: element was undefined, defaulting to document.body\",\"warn\"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=t.element.getAttribute(\"data-pixel-ratio\")||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var o=n._getRelativeMousePosition(e,t.element,t.pixelRatio),r=e.changedTouches;r&&(t.button=0,e.preventDefault()),t.absolute.x=o.x,t.absolute.y=o.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var o=n._getRelativeMousePosition(e,t.element,t.pixelRatio),r=e.changedTouches;r?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=o.x,t.absolute.y=o.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var o=n._getRelativeMousePosition(e,t.element,t.pixelRatio),r=e.changedTouches;r&&e.preventDefault(),t.button=-1,t.absolute.x=o.x,t.absolute.y=o.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},n.setElement(t,t.element),t},n.setElement=function(e,t){e.element=t,t.addEventListener(\"mousemove\",e.mousemove),t.addEventListener(\"mousedown\",e.mousedown),t.addEventListener(\"mouseup\",e.mouseup),t.addEventListener(\"mousewheel\",e.mousewheel),t.addEventListener(\"DOMMouseScroll\",e.mousewheel),t.addEventListener(\"touchmove\",e.mousemove),t.addEventListener(\"touchstart\",e.mousedown),t.addEventListener(\"touchend\",e.mouseup)},n.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},n.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},n.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},n._getRelativeMousePosition=function(e,t,o){var n,r,i=t.getBoundingClientRect(),s=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:s.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:s.scrollTop,c=e.changedTouches;return c?(n=c[0].pageX-i.left-a,r=c[0].pageY-i.top-l):(n=e.pageX-i.left-a,r=e.pageY-i.top-l),{x:n/(t.clientWidth/(t.width||t.clientWidth)*o),y:r/(t.clientHeight/(t.height||t.clientHeight)*o)}}},{\"../core/Common\":14}],20:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Common\");n._registry={},n.register=function(e){if(n.isPlugin(e)||r.warn(\"Plugin.register:\",n.toString(e),\"does not implement all required fields.\"),e.name in n._registry){var t=n._registry[e.name],o=n.versionParse(e.version).number,i=n.versionParse(t.version).number;o>i?(r.warn(\"Plugin.register:\",n.toString(t),\"was upgraded to\",n.toString(e)),n._registry[e.name]=e):o<i?r.warn(\"Plugin.register:\",n.toString(t),\"can not be downgraded to\",n.toString(e)):e!==t&&r.warn(\"Plugin.register:\",n.toString(e),\"is already registered to different plugin object\")}else n._registry[e.name]=e;return e},n.resolve=function(e){return n._registry[n.dependencyParse(e).name]},n.toString=function(e){return\"string\"==typeof e?e:(e.name||\"anonymous\")+\"@\"+(e.version||e.range||\"0.0.0\")},n.isPlugin=function(e){return e&&e.name&&e.version&&e.install},n.isUsed=function(e,t){return e.used.indexOf(t)>-1},n.isFor=function(e,t){var o=e.for&&n.dependencyParse(e.for);return!e.for||t.name===o.name&&n.versionSatisfies(t.version,o.range)},n.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var o=n.dependencies(e),i=r.topologicalSort(o),s=[],a=0;a<i.length;a+=1)if(i[a]!==e.name){var l=n.resolve(i[a]);l?n.isUsed(e,l.name)||(n.isFor(l,e)||(r.warn(\"Plugin.use:\",n.toString(l),\"is for\",l.for,\"but installed on\",n.toString(e)+\".\"),l._warned=!0),l.install?l.install(e):(r.warn(\"Plugin.use:\",n.toString(l),\"does not specify an install function.\"),l._warned=!0),l._warned?(s.push(\"🔶 \"+n.toString(l)),delete l._warned):s.push(\"✅ \"+n.toString(l)),e.used.push(l.name)):s.push(\"❌ \"+i[a])}s.length>0&&r.info(s.join(\"  \"))}else r.warn(\"Plugin.use:\",n.toString(e),\"does not specify any dependencies to install.\")},n.dependencies=function(e,t){var o=n.dependencyParse(e),i=o.name;if(!(i in(t=t||{}))){e=n.resolve(e)||e,t[i]=r.map(e.uses||[],function(t){n.isPlugin(t)&&n.register(t);var i=n.dependencyParse(t),s=n.resolve(t);return s&&!n.versionSatisfies(s.version,i.range)?(r.warn(\"Plugin.dependencies:\",n.toString(s),\"does not satisfy\",n.toString(i),\"used by\",n.toString(o)+\".\"),s._warned=!0,e._warned=!0):s||(r.warn(\"Plugin.dependencies:\",n.toString(t),\"used by\",n.toString(o),\"could not be resolved.\"),e._warned=!0),i.name});for(var s=0;s<t[i].length;s+=1)n.dependencies(t[i][s],t);return t}},n.dependencyParse=function(e){return r.isString(e)?(/^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/.test(e)||r.warn(\"Plugin.dependencyParse:\",e,\"is not a valid dependency string.\"),{name:e.split(\"@\")[0],range:e.split(\"@\")[1]||\"*\"}):{name:e.name,range:e.range||e.version}},n.versionParse=function(e){/^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/.test(e)||r.warn(\"Plugin.versionParse:\",e,\"is not a valid version or range.\");var t=e.split(\"-\");e=t[0];var o=isNaN(Number(e[0])),n=o?e.substr(1):e,i=r.map(n.split(\".\"),function(e){return Number(e)});return{isRange:o,version:n,range:e,operator:o?e[0]:\"\",parts:i,prerelease:t[1],number:1e8*i[0]+1e4*i[1]+i[2]}},n.versionSatisfies=function(e,t){t=t||\"*\";var o=n.versionParse(t),r=o.parts,i=n.versionParse(e),s=i.parts;if(o.isRange){if(\"*\"===o.operator||\"*\"===e)return!0;if(\"~\"===o.operator)return s[0]===r[0]&&s[1]===r[1]&&s[2]>=r[2];if(\"^\"===o.operator)return r[0]>0?s[0]===r[0]&&i.number>=o.number:r[1]>0?s[1]===r[1]&&s[2]>=r[2]:s[2]===r[2]}return e===t||\"*\"===e}},{\"./Common\":14}],21:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Events\"),i=e(\"./Engine\"),s=e(\"./Common\");!function(){var e,t,o;\"undefined\"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),e||(e=function(e){o=setTimeout(function(){e(s.now())},1e3/60)},t=function(){clearTimeout(o)}),n.create=function(e){var t=s.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},n.run=function(t,o){return void 0!==t.positionIterations&&(o=t,t=n.create()),function r(i){t.frameRequestId=e(r),i&&t.enabled&&n.tick(t,o,i)}(),t},n.tick=function(e,t,o){var n,s=t.timing,a=1,l={timestamp:s.timestamp};r.trigger(e,\"beforeTick\",l),r.trigger(t,\"beforeTick\",l),e.isFixed?n=e.delta:(n=o-e.timePrev||e.delta,e.timePrev=o,e.deltaHistory.push(n),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),n=(n=(n=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:n)>e.deltaMax?e.deltaMax:n,a=n/e.delta,e.delta=n),0!==e.timeScalePrev&&(a*=s.timeScale/e.timeScalePrev),0===s.timeScale&&(a=0),e.timeScalePrev=s.timeScale,e.correction=a,e.frameCounter+=1,o-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((o-e.counterTimestamp)/1e3),e.counterTimestamp=o,e.frameCounter=0),r.trigger(e,\"tick\",l),r.trigger(t,\"tick\",l),t.world.isModified&&t.render&&t.render.controller&&t.render.controller.clear&&t.render.controller.clear(t.render),r.trigger(e,\"beforeUpdate\",l),i.update(t,n,a),r.trigger(e,\"afterUpdate\",l),t.render&&t.render.controller&&(r.trigger(e,\"beforeRender\",l),r.trigger(t,\"beforeRender\",l),t.render.controller.world(t.render),r.trigger(e,\"afterRender\",l),r.trigger(t,\"afterRender\",l)),r.trigger(e,\"afterTick\",l),r.trigger(t,\"afterTick\",l)},n.stop=function(e){t(e.frameRequestId)},n.start=function(e,t){n.run(e,t)}}()},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(e,t,o){var n={};t.exports=n;var r=e(\"./Events\");n._motionWakeThreshold=.18,n._motionSleepThreshold=.08,n._minBias=.9,n.update=function(e,t){for(var o=t*t*t,r=0;r<e.length;r++){var i=e[r],s=i.speed*i.speed+i.angularSpeed*i.angularSpeed;if(0===i.force.x&&0===i.force.y){var a=Math.min(i.motion,s),l=Math.max(i.motion,s);i.motion=n._minBias*a+(1-n._minBias)*l,i.sleepThreshold>0&&i.motion<n._motionSleepThreshold*o?(i.sleepCounter+=1,i.sleepCounter>=i.sleepThreshold&&n.set(i,!0)):i.sleepCounter>0&&(i.sleepCounter-=1)}else n.set(i,!1)}},n.afterCollisions=function(e,t){for(var o=t*t*t,r=0;r<e.length;r++){var i=e[r];if(i.isActive){var s=i.collision,a=s.bodyA.parent,l=s.bodyB.parent;if(!(a.isSleeping&&l.isSleeping||a.isStatic||l.isStatic)&&(a.isSleeping||l.isSleeping)){var c=a.isSleeping&&!a.isStatic?a:l,u=c===a?l:a;!c.isStatic&&u.motion>n._motionWakeThreshold*o&&n.set(c,!1)}}}},n.set=function(e,t){var o=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,o||r.trigger(e,\"sleepStart\")):(e.isSleeping=!1,e.sleepCounter=0,o&&r.trigger(e,\"sleepEnd\"))}},{\"./Events\":16}],23:[function(e,t,o){var n={};t.exports=n;var r,i=e(\"../geometry/Vertices\"),s=e(\"../core/Common\"),a=e(\"../body/Body\"),l=e(\"../geometry/Bounds\"),c=e(\"../geometry/Vector\");n.rectangle=function(e,t,o,n,r){r=r||{};var l={label:\"Rectangle Body\",position:{x:e,y:t},vertices:i.fromPath(\"L 0 0 L \"+o+\" 0 L \"+o+\" \"+n+\" L 0 \"+n)};if(r.chamfer){var c=r.chamfer;l.vertices=i.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete r.chamfer}return a.create(s.extend({},l,r))},n.trapezoid=function(e,t,o,n,r,l){l=l||{};var c,u=(1-2*(r*=.5))*o,d=o*r,p=d+u,f=p+d;c=r<.5?\"L 0 0 L \"+d+\" \"+-n+\" L \"+p+\" \"+-n+\" L \"+f+\" 0\":\"L 0 0 L \"+p+\" \"+-n+\" L \"+f+\" 0\";var v={label:\"Trapezoid Body\",position:{x:e,y:t},vertices:i.fromPath(c)};if(l.chamfer){var y=l.chamfer;v.vertices=i.chamfer(v.vertices,y.radius,y.quality,y.qualityMin,y.qualityMax),delete l.chamfer}return a.create(s.extend({},v,l))},n.circle=function(e,t,o,r,i){r=r||{};var a={label:\"Circle Body\",circleRadius:o};i=i||25;var l=Math.ceil(Math.max(10,Math.min(i,o)));return l%2==1&&(l+=1),n.polygon(e,t,l,o,s.extend({},a,r))},n.polygon=function(e,t,o,r,l){if(l=l||{},o<3)return n.circle(e,t,r,l);for(var c=2*Math.PI/o,u=\"\",d=.5*c,p=0;p<o;p+=1){var f=d+p*c,v=Math.cos(f)*r,y=Math.sin(f)*r;u+=\"L \"+v.toFixed(3)+\" \"+y.toFixed(3)+\" \"}var m={label:\"Polygon Body\",position:{x:e,y:t},vertices:i.fromPath(u)};if(l.chamfer){var g=l.chamfer;m.vertices=i.chamfer(m.vertices,g.radius,g.quality,g.qualityMin,g.qualityMax),delete l.chamfer}return a.create(s.extend({},m,l))},n.fromVertices=function(e,t,o,n,u,d,p){var f,v,y,m,g,h,x,b,w;for(r||(r=s._requireGlobal(\"decomp\",\"poly-decomp\")),n=n||{},v=[],u=void 0!==u&&u,d=void 0!==d?d:.01,p=void 0!==p?p:10,r||s.warn(\"Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.\"),s.isArray(o[0])||(o=[o]),b=0;b<o.length;b+=1)if(m=o[b],(y=i.isConvex(m))||!r)m=y?i.clockwiseSort(m):i.hull(m),v.push({position:{x:e,y:t},vertices:m});else{var S=m.map(function(e){return[e.x,e.y]});r.makeCCW(S),!1!==d&&r.removeCollinearPoints(S,d);var M=r.quickDecomp(S);for(g=0;g<M.length;g++){var _=M[g],P=_.map(function(e){return{x:e[0],y:e[1]}});p>0&&i.area(P)<p||v.push({position:i.centre(P),vertices:P})}}for(g=0;g<v.length;g++)v[g]=a.create(s.extend(v[g],n));if(u)for(g=0;g<v.length;g++){var C=v[g];for(h=g+1;h<v.length;h++){var A=v[h];if(l.overlaps(C.bounds,A.bounds)){var O=C.vertices,B=A.vertices;for(x=0;x<C.vertices.length;x++)for(w=0;w<A.vertices.length;w++){var I=c.magnitudeSquared(c.sub(O[(x+1)%O.length],B[w])),k=c.magnitudeSquared(c.sub(O[x],B[(w+1)%B.length]));I<5&&k<5&&(O[x].isInternal=!0,B[w].isInternal=!0)}}}}return v.length>1?(f=a.create(s.extend({parts:v.slice(0)},n)),a.setPosition(f,{x:e,y:t}),f):v[0]}},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(e,t,o){var n={};t.exports=n;var r=e(\"../body/Composite\"),i=e(\"../constraint/Constraint\"),s=e(\"../core/Common\"),a=e(\"../body/Body\"),l=e(\"./Bodies\");n.stack=function(e,t,o,n,i,s,l){for(var c,u=r.create({label:\"Stack\"}),d=e,p=t,f=0,v=0;v<n;v++){for(var y=0,m=0;m<o;m++){var g=l(d,p,m,v,c,f);if(g){var h=g.bounds.max.y-g.bounds.min.y,x=g.bounds.max.x-g.bounds.min.x;h>y&&(y=h),a.translate(g,{x:.5*x,y:.5*h}),d=g.bounds.max.x+i,r.addBody(u,g),c=g,f+=1}else d+=i}p+=y+s,d=e}return u},n.chain=function(e,t,o,n,a,l){for(var c=e.bodies,u=1;u<c.length;u++){var d=c[u-1],p=c[u],f=d.bounds.max.y-d.bounds.min.y,v=d.bounds.max.x-d.bounds.min.x,y=p.bounds.max.y-p.bounds.min.y,m=p.bounds.max.x-p.bounds.min.x,g={bodyA:d,pointA:{x:v*t,y:f*o},bodyB:p,pointB:{x:m*n,y:y*a}},h=s.extend(g,l);r.addConstraint(e,i.create(h))}return e.label+=\" Chain\",e},n.mesh=function(e,t,o,n,a){var l,c,u,d,p,f=e.bodies;for(l=0;l<o;l++){for(c=1;c<t;c++)u=f[c-1+l*t],d=f[c+l*t],r.addConstraint(e,i.create(s.extend({bodyA:u,bodyB:d},a)));if(l>0)for(c=0;c<t;c++)u=f[c+(l-1)*t],d=f[c+l*t],r.addConstraint(e,i.create(s.extend({bodyA:u,bodyB:d},a))),n&&c>0&&(p=f[c-1+(l-1)*t],r.addConstraint(e,i.create(s.extend({bodyA:p,bodyB:d},a)))),n&&c<t-1&&(p=f[c+1+(l-1)*t],r.addConstraint(e,i.create(s.extend({bodyA:p,bodyB:d},a))))}return e.label+=\" Mesh\",e},n.pyramid=function(e,t,o,r,i,s,l){return n.stack(e,t,o,r,i,s,function(t,n,s,c,u,d){var p=Math.min(r,Math.ceil(o/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>p)){var v=c=p-c,y=o-1-c;if(!(s<v||s>y)){1===d&&a.translate(u,{x:(s+(o%2==1?1:-1))*f,y:0});var m=u?s*f:0;return l(e+m+s*i,n,s,c,u,d)}}})},n.newtonsCradle=function(e,t,o,n,s){for(var a=r.create({label:\"Newtons Cradle\"}),c=0;c<o;c++){var u=l.circle(e+c*(1.9*n),t+s,n,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),d=i.create({pointA:{x:e+c*(1.9*n),y:t},bodyB:u});r.addBody(a,u),r.addConstraint(a,d)}return a},n.car=function(e,t,o,n,s){var c=a.nextGroup(!0),u=.5*-o+20,d=.5*o-20,p=r.create({label:\"Car\"}),f=l.rectangle(e,t,o,n,{collisionFilter:{group:c},chamfer:{radius:.5*n},density:2e-4}),v=l.circle(e+u,t+0,s,{collisionFilter:{group:c},friction:.8}),y=l.circle(e+d,t+0,s,{collisionFilter:{group:c},friction:.8}),m=i.create({bodyB:f,pointB:{x:u,y:0},bodyA:v,stiffness:1,length:0}),g=i.create({bodyB:f,pointB:{x:d,y:0},bodyA:y,stiffness:1,length:0});return r.addBody(p,f),r.addBody(p,v),r.addBody(p,y),r.addConstraint(p,m),r.addConstraint(p,g),p},n.softBody=function(e,t,o,r,i,a,c,u,d,p){d=s.extend({inertia:1/0},d),p=s.extend({stiffness:.2,render:{type:\"line\",anchors:!1}},p);var f=n.stack(e,t,o,r,i,a,function(e,t){return l.circle(e,t,u,d)});return n.mesh(f,o,r,c,p),f.label=\"Soft Body\",f}},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vector\"),i=e(\"../core/Common\");n.fromVertices=function(e){for(var t={},o=0;o<e.length;o++){var n=(o+1)%e.length,s=r.normalise({x:e[n].y-e[o].y,y:e[o].x-e[n].x}),a=0===s.y?1/0:s.x/s.y;a=a.toFixed(3).toString(),t[a]=s}return i.values(t)},n.rotate=function(e,t){if(0!==t)for(var o=Math.cos(t),n=Math.sin(t),r=0;r<e.length;r++){var i,s=e[r];i=s.x*o-s.y*n,s.y=s.x*n+s.y*o,s.x=i}}},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(e,t,o){var n={};t.exports=n,n.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&n.update(t,e),t},n.update=function(e,t,o){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var n=0;n<t.length;n++){var r=t[n];r.x>e.max.x&&(e.max.x=r.x),r.x<e.min.x&&(e.min.x=r.x),r.y>e.max.y&&(e.max.y=r.y),r.y<e.min.y&&(e.min.y=r.y)}o&&(o.x>0?e.max.x+=o.x:e.min.x+=o.x,o.y>0?e.max.y+=o.y:e.min.y+=o.y)},n.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},n.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},n.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},n.shift=function(e,t){var o=e.max.x-e.min.x,n=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+o,e.min.y=t.y,e.max.y=t.y+n}},{}],27:[function(e,t,o){var n={};t.exports=n,e(\"../geometry/Bounds\");var r=e(\"../core/Common\");n.pathToVertices=function(e,t){\"undefined\"==typeof window||\"SVGPathSeg\"in window||r.warn(\"Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.\");var o,i,s,a,l,c,u,d,p,f,v,y,m=[],g=0,h=0,x=0;t=t||15;var b=function(e,t,o){var n=o%2==1&&o>1;if(!p||e!=p.x||t!=p.y){p&&n?(v=p.x,y=p.y):(v=0,y=0);var r={x:v+e,y:y+t};!n&&p||(p=r),m.push(r),h=v+e,x=y+t}},w=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if(\"Z\"!==t){switch(t){case\"M\":case\"L\":case\"T\":case\"C\":case\"S\":case\"Q\":h=e.x,x=e.y;break;case\"H\":h=e.x;break;case\"V\":x=e.y}b(h,x,e.pathSegType)}};for(n._svgPathToAbsolute(e),s=e.getTotalLength(),c=[],o=0;o<e.pathSegList.numberOfItems;o+=1)c.push(e.pathSegList.getItem(o));for(u=c.concat();g<s;){if(f=e.getPathSegAtLength(g),(l=c[f])!=d){for(;u.length&&u[0]!=l;)w(u.shift());d=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case\"C\":case\"T\":case\"S\":case\"Q\":case\"A\":a=e.getPointAtLength(g),b(a.x,a.y,0)}g+=t}for(o=0,i=u.length;o<i;++o)w(u[o]);return m},n._svgPathToAbsolute=function(e){for(var t,o,n,r,i,s,a=e.pathSegList,l=0,c=0,u=a.numberOfItems,d=0;d<u;++d){var p=a.getItem(d),f=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))\"x\"in p&&(l=p.x),\"y\"in p&&(c=p.y);else switch(\"x1\"in p&&(n=l+p.x1),\"x2\"in p&&(i=l+p.x2),\"y1\"in p&&(r=c+p.y1),\"y2\"in p&&(s=c+p.y2),\"x\"in p&&(l+=p.x),\"y\"in p&&(c+=p.y),f){case\"m\":a.replaceItem(e.createSVGPathSegMovetoAbs(l,c),d);break;case\"l\":a.replaceItem(e.createSVGPathSegLinetoAbs(l,c),d);break;case\"h\":a.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(l),d);break;case\"v\":a.replaceItem(e.createSVGPathSegLinetoVerticalAbs(c),d);break;case\"c\":a.replaceItem(e.createSVGPathSegCurvetoCubicAbs(l,c,n,r,i,s),d);break;case\"s\":a.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(l,c,i,s),d);break;case\"q\":a.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(l,c,n,r),d);break;case\"t\":a.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),d);break;case\"a\":a.replaceItem(e.createSVGPathSegArcAbs(l,c,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),d);break;case\"z\":case\"Z\":l=t,c=o}\"M\"!=f&&\"m\"!=f||(t=l,o=c)}}},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(e,t,o){var n={};t.exports=n,n.create=function(e,t){return{x:e||0,y:t||0}},n.clone=function(e){return{x:e.x,y:e.y}},n.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},n.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},n.rotate=function(e,t,o){var n=Math.cos(t),r=Math.sin(t);o||(o={});var i=e.x*n-e.y*r;return o.y=e.x*r+e.y*n,o.x=i,o},n.rotateAbout=function(e,t,o,n){var r=Math.cos(t),i=Math.sin(t);n||(n={});var s=o.x+((e.x-o.x)*r-(e.y-o.y)*i);return n.y=o.y+((e.x-o.x)*i+(e.y-o.y)*r),n.x=s,n},n.normalise=function(e){var t=n.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},n.dot=function(e,t){return e.x*t.x+e.y*t.y},n.cross=function(e,t){return e.x*t.y-e.y*t.x},n.cross3=function(e,t,o){return(t.x-e.x)*(o.y-e.y)-(t.y-e.y)*(o.x-e.x)},n.add=function(e,t,o){return o||(o={}),o.x=e.x+t.x,o.y=e.y+t.y,o},n.sub=function(e,t,o){return o||(o={}),o.x=e.x-t.x,o.y=e.y-t.y,o},n.mult=function(e,t){return{x:e.x*t,y:e.y*t}},n.div=function(e,t){return{x:e.x/t,y:e.y/t}},n.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},n.neg=function(e){return{x:-e.x,y:-e.y}},n.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},{}],29:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Vector\"),i=e(\"../core/Common\");n.create=function(e,t){for(var o=[],n=0;n<e.length;n++){var r=e[n],i={x:r.x,y:r.y,index:n,body:t,isInternal:!1};o.push(i)}return o},n.fromPath=function(e,t){var o=[];return e.replace(/L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/gi,function(e,t,n){o.push({x:parseFloat(t),y:parseFloat(n)})}),n.create(o,t)},n.centre=function(e){for(var t,o,i,s=n.area(e,!0),a={x:0,y:0},l=0;l<e.length;l++)i=(l+1)%e.length,t=r.cross(e[l],e[i]),o=r.mult(r.add(e[l],e[i]),t),a=r.add(a,o);return r.div(a,6*s)},n.mean=function(e){for(var t={x:0,y:0},o=0;o<e.length;o++)t.x+=e[o].x,t.y+=e[o].y;return r.div(t,e.length)},n.area=function(e,t){for(var o=0,n=e.length-1,r=0;r<e.length;r++)o+=(e[n].x-e[r].x)*(e[n].y+e[r].y),n=r;return t?o/2:Math.abs(o)/2},n.inertia=function(e,t){for(var o,n,i=0,s=0,a=e,l=0;l<a.length;l++)n=(l+1)%a.length,o=Math.abs(r.cross(a[n],a[l])),i+=o*(r.dot(a[n],a[n])+r.dot(a[n],a[l])+r.dot(a[l],a[l])),s+=o;return t/6*(i/s)},n.translate=function(e,t,o){var n;if(o)for(n=0;n<e.length;n++)e[n].x+=t.x*o,e[n].y+=t.y*o;else for(n=0;n<e.length;n++)e[n].x+=t.x,e[n].y+=t.y;return e},n.rotate=function(e,t,o){if(0!==t){for(var n=Math.cos(t),r=Math.sin(t),i=0;i<e.length;i++){var s=e[i],a=s.x-o.x,l=s.y-o.y;s.x=o.x+(a*n-l*r),s.y=o.y+(a*r+l*n)}return e}},n.contains=function(e,t){for(var o=0;o<e.length;o++){var n=e[o],r=e[(o+1)%e.length];if((t.x-n.x)*(r.y-n.y)+(t.y-n.y)*(n.x-r.x)>0)return!1}return!0},n.scale=function(e,t,o,i){if(1===t&&1===o)return e;var s,a;i=i||n.centre(e);for(var l=0;l<e.length;l++)s=e[l],a=r.sub(s,i),e[l].x=i.x+a.x*t,e[l].y=i.y+a.y*o;return e},n.chamfer=function(e,t,o,n,s){t=\"number\"==typeof t?[t]:t||[8],o=void 0!==o?o:-1,n=n||2,s=s||14;for(var a=[],l=0;l<e.length;l++){var c=e[l-1>=0?l-1:e.length-1],u=e[l],d=e[(l+1)%e.length],p=t[l<t.length?l:t.length-1];if(0!==p){var f=r.normalise({x:u.y-c.y,y:c.x-u.x}),v=r.normalise({x:d.y-u.y,y:u.x-d.x}),y=Math.sqrt(2*Math.pow(p,2)),m=r.mult(i.clone(f),p),g=r.normalise(r.mult(r.add(f,v),.5)),h=r.sub(u,r.mult(g,y)),x=o;-1===o&&(x=1.75*Math.pow(p,.32)),(x=i.clamp(x,n,s))%2==1&&(x+=1);for(var b=Math.acos(r.dot(f,v)),w=b/x,S=0;S<x;S++)a.push(r.add(r.rotate(m,w*S),h))}else a.push(u)}return a},n.clockwiseSort=function(e){var t=n.mean(e);return e.sort(function(e,o){return r.angle(t,e)-r.angle(t,o)}),e},n.isConvex=function(e){var t,o,n,r,i=0,s=e.length;if(s<3)return null;for(t=0;t<s;t++)if(n=(t+2)%s,r=(e[o=(t+1)%s].x-e[t].x)*(e[n].y-e[o].y),(r-=(e[o].y-e[t].y)*(e[n].x-e[o].x))<0?i|=1:r>0&&(i|=2),3===i)return!1;return 0!==i||null},n.hull=function(e){var t,o,n=[],i=[];for((e=e.slice(0)).sort(function(e,t){var o=e.x-t.x;return 0!==o?o:e.y-t.y}),o=0;o<e.length;o+=1){for(t=e[o];i.length>=2&&r.cross3(i[i.length-2],i[i.length-1],t)<=0;)i.pop();i.push(t)}for(o=e.length-1;o>=0;o-=1){for(t=e[o];n.length>=2&&r.cross3(n[n.length-2],n[n.length-1],t)<=0;)n.pop();n.push(t)}return n.pop(),i.pop(),n.concat(i)}},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(e,t,o){var n=t.exports=e(\"../core/Matter\");n.Body=e(\"../body/Body\"),n.Composite=e(\"../body/Composite\"),n.World=e(\"../body/World\"),n.Contact=e(\"../collision/Contact\"),n.Detector=e(\"../collision/Detector\"),n.Grid=e(\"../collision/Grid\"),n.Pairs=e(\"../collision/Pairs\"),n.Pair=e(\"../collision/Pair\"),n.Query=e(\"../collision/Query\"),n.Resolver=e(\"../collision/Resolver\"),n.SAT=e(\"../collision/SAT\"),n.Constraint=e(\"../constraint/Constraint\"),n.MouseConstraint=e(\"../constraint/MouseConstraint\"),n.Common=e(\"../core/Common\"),n.Engine=e(\"../core/Engine\"),n.Events=e(\"../core/Events\"),n.Mouse=e(\"../core/Mouse\"),n.Runner=e(\"../core/Runner\"),n.Sleeping=e(\"../core/Sleeping\"),n.Plugin=e(\"../core/Plugin\"),n.Bodies=e(\"../factory/Bodies\"),n.Composites=e(\"../factory/Composites\"),n.Axes=e(\"../geometry/Axes\"),n.Bounds=e(\"../geometry/Bounds\"),n.Svg=e(\"../geometry/Svg\"),n.Vector=e(\"../geometry/Vector\"),n.Vertices=e(\"../geometry/Vertices\"),n.Render=e(\"../render/Render\"),n.RenderPixi=e(\"../render/RenderPixi\"),n.World.add=n.Composite.add,n.World.remove=n.Composite.remove,n.World.addComposite=n.Composite.addComposite,n.World.addBody=n.Composite.addBody,n.World.addConstraint=n.Composite.addConstraint,n.World.clear=n.Composite.clear,n.Engine.run=n.Runner.run},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(e,t,o){var n={};t.exports=n;var r=e(\"../core/Common\"),i=e(\"../body/Composite\"),s=e(\"../geometry/Bounds\"),a=e(\"../core/Events\"),l=e(\"../collision/Grid\"),c=e(\"../geometry/Vector\"),u=e(\"../core/Mouse\");!function(){var e,t;\"undefined\"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(function(){e(r.now())},1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),n.create=function(e){var t={controller:n,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:\"#18181d\",wireframeBackground:\"#0f0f13\",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},i=r.extend(t,e);return i.canvas&&(i.canvas.width=i.options.width||i.canvas.width,i.canvas.height=i.options.height||i.canvas.height),i.mouse=e.mouse,i.engine=e.engine,i.canvas=i.canvas||o(i.options.width,i.options.height),i.context=i.canvas.getContext(\"2d\"),i.textures={},i.bounds=i.bounds||{min:{x:0,y:0},max:{x:i.canvas.width,y:i.canvas.height}},1!==i.options.pixelRatio&&n.setPixelRatio(i,i.options.pixelRatio),r.isElement(i.element)?i.element.appendChild(i.canvas):i.canvas.parentNode||r.log(\"Render.create: options.element was undefined, render.canvas was created but not appended\",\"warn\"),i},n.run=function(t){!function o(r){t.frameRequestId=e(o),n.world(t)}()},n.stop=function(e){t(e.frameRequestId)},n.setPixelRatio=function(e,t){var o=e.options,n=e.canvas;\"auto\"===t&&(t=d(n)),o.pixelRatio=t,n.setAttribute(\"data-pixel-ratio\",t),n.width=o.width*t,n.height=o.height*t,n.style.width=o.width+\"px\",n.style.height=o.height+\"px\",e.context.scale(t,t)},n.lookAt=function(e,t,o,n){n=void 0===n||n,t=r.isArray(t)?t:[t],o=o||{x:0,y:0};for(var i={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},s=0;s<t.length;s+=1){var a=t[s],l=a.bounds?a.bounds.min:a.min||a.position||a,c=a.bounds?a.bounds.max:a.max||a.position||a;l&&c&&(l.x<i.min.x&&(i.min.x=l.x),c.x>i.max.x&&(i.max.x=c.x),l.y<i.min.y&&(i.min.y=l.y),c.y>i.max.y&&(i.max.y=c.y))}var d=i.max.x-i.min.x+2*o.x,p=i.max.y-i.min.y+2*o.y,f=e.canvas.height,v=e.canvas.width,y=v/f,m=d/p,g=1,h=1;m>y?h=m/y:g=y/m,e.options.hasBounds=!0,e.bounds.min.x=i.min.x,e.bounds.max.x=i.min.x+d*g,e.bounds.min.y=i.min.y,e.bounds.max.y=i.min.y+p*h,n&&(e.bounds.min.x+=.5*d-d*g*.5,e.bounds.max.x+=.5*d-d*g*.5,e.bounds.min.y+=.5*p-p*h*.5,e.bounds.max.y+=.5*p-p*h*.5),e.bounds.min.x-=o.x,e.bounds.max.x-=o.x,e.bounds.min.y-=o.y,e.bounds.max.y-=o.y,e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))},n.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,o=e.bounds.max.y-e.bounds.min.y,n=t/e.options.width,r=o/e.options.height;e.context.scale(1/n,1/r),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},n.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},n.world=function(e){var t,o=e.engine,r=o.world,d=e.canvas,p=e.context,v=e.options,y=i.allBodies(r),m=i.allConstraints(r),g=v.wireframes?v.wireframeBackground:v.background,h=[],x=[],b={timestamp:o.timing.timestamp};if(a.trigger(e,\"beforeRender\",b),e.currentBackground!==g&&f(e,g),p.globalCompositeOperation=\"source-in\",p.fillStyle=\"transparent\",p.fillRect(0,0,d.width,d.height),p.globalCompositeOperation=\"source-over\",v.hasBounds){for(t=0;t<y.length;t++){var w=y[t];s.overlaps(w.bounds,e.bounds)&&h.push(w)}for(t=0;t<m.length;t++){var S=m[t],M=S.bodyA,_=S.bodyB,P=S.pointA,C=S.pointB;M&&(P=c.add(M.position,S.pointA)),_&&(C=c.add(_.position,S.pointB)),P&&C&&(s.contains(e.bounds,P)||s.contains(e.bounds,C))&&x.push(S)}n.startViewTransform(e),e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))}else x=m,h=y;!v.wireframes||o.enableSleeping&&v.showSleeping?n.bodies(e,h,p):(v.showConvexHulls&&n.bodyConvexHulls(e,h,p),n.bodyWireframes(e,h,p)),v.showBounds&&n.bodyBounds(e,h,p),(v.showAxes||v.showAngleIndicator)&&n.bodyAxes(e,h,p),v.showPositions&&n.bodyPositions(e,h,p),v.showVelocity&&n.bodyVelocity(e,h,p),v.showIds&&n.bodyIds(e,h,p),v.showSeparations&&n.separations(e,o.pairs.list,p),v.showCollisions&&n.collisions(e,o.pairs.list,p),v.showVertexNumbers&&n.vertexNumbers(e,h,p),v.showMousePosition&&n.mousePosition(e,e.mouse,p),n.constraints(x,p),v.showBroadphase&&o.broadphase.controller===l&&n.grid(e,o.broadphase,p),v.showDebug&&n.debug(e,p),v.hasBounds&&n.endViewTransform(e),a.trigger(e,\"afterRender\",b)},n.debug=function(e,t){var o=t,n=e.engine,r=n.world,s=n.metrics,a=e.options;if(i.allBodies(r),n.timing.timestamp-(e.debugTimestamp||0)>=500){var l=\"\";s.timing&&(l+=\"fps: \"+Math.round(s.timing.fps)+\"    \"),e.debugString=l,e.debugTimestamp=n.timing.timestamp}if(e.debugString){o.font=\"12px Arial\",a.wireframes?o.fillStyle=\"rgba(255,255,255,0.5)\":o.fillStyle=\"rgba(0,0,0,0.5)\";for(var c=e.debugString.split(\"\\n\"),u=0;u<c.length;u++)o.fillText(c[u],50,50+18*u)}},n.constraints=function(e,t){for(var o=t,n=0;n<e.length;n++){var i=e[n];if(i.render.visible&&i.pointA&&i.pointB){var s,a,l=i.bodyA,u=i.bodyB;if(s=l?c.add(l.position,i.pointA):i.pointA,\"pin\"===i.render.type)o.beginPath(),o.arc(s.x,s.y,3,0,2*Math.PI),o.closePath();else{if(a=u?c.add(u.position,i.pointB):i.pointB,o.beginPath(),o.moveTo(s.x,s.y),\"spring\"===i.render.type)for(var d,p=c.sub(a,s),f=c.perp(c.normalise(p)),v=Math.ceil(r.clamp(i.length/5,12,20)),y=1;y<v;y+=1)d=y%2==0?1:-1,o.lineTo(s.x+p.x*(y/v)+f.x*d*4,s.y+p.y*(y/v)+f.y*d*4);o.lineTo(a.x,a.y)}i.render.lineWidth&&(o.lineWidth=i.render.lineWidth,o.strokeStyle=i.render.strokeStyle,o.stroke()),i.render.anchors&&(o.fillStyle=i.render.strokeStyle,o.beginPath(),o.arc(s.x,s.y,3,0,2*Math.PI),o.arc(a.x,a.y,3,0,2*Math.PI),o.closePath(),o.fill())}}},n.bodyShadows=function(e,t,o){for(var n=o,r=(e.engine,0);r<t.length;r++){var i=t[r];if(i.render.visible){if(i.circleRadius)n.beginPath(),n.arc(i.position.x,i.position.y,i.circleRadius,0,2*Math.PI),n.closePath();else{n.beginPath(),n.moveTo(i.vertices[0].x,i.vertices[0].y);for(var s=1;s<i.vertices.length;s++)n.lineTo(i.vertices[s].x,i.vertices[s].y);n.closePath()}var a=i.position.x-.5*e.options.width,l=i.position.y-.2*e.options.height,c=Math.abs(a)+Math.abs(l);n.shadowColor=\"rgba(0,0,0,0.15)\",n.shadowOffsetX=.05*a,n.shadowOffsetY=.05*l,n.shadowBlur=1+12*Math.min(1,c/1e3),n.fill(),n.shadowColor=null,n.shadowOffsetX=null,n.shadowOffsetY=null,n.shadowBlur=null}}},n.bodies=function(e,t,o){var n,r,i,s,a=o,l=(e.engine,e.options),c=l.showInternalEdges||!l.wireframes;for(i=0;i<t.length;i++)if((n=t[i]).render.visible)for(s=n.parts.length>1?1:0;s<n.parts.length;s++)if((r=n.parts[s]).render.visible){if(l.showSleeping&&n.isSleeping?a.globalAlpha=.5*r.render.opacity:1!==r.render.opacity&&(a.globalAlpha=r.render.opacity),r.render.sprite&&r.render.sprite.texture&&!l.wireframes){var u=r.render.sprite,d=p(e,u.texture);a.translate(r.position.x,r.position.y),a.rotate(r.angle),a.drawImage(d,d.width*-u.xOffset*u.xScale,d.height*-u.yOffset*u.yScale,d.width*u.xScale,d.height*u.yScale),a.rotate(-r.angle),a.translate(-r.position.x,-r.position.y)}else{if(r.circleRadius)a.beginPath(),a.arc(r.position.x,r.position.y,r.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(r.vertices[0].x,r.vertices[0].y);for(var f=1;f<r.vertices.length;f++)!r.vertices[f-1].isInternal||c?a.lineTo(r.vertices[f].x,r.vertices[f].y):a.moveTo(r.vertices[f].x,r.vertices[f].y),r.vertices[f].isInternal&&!c&&a.moveTo(r.vertices[(f+1)%r.vertices.length].x,r.vertices[(f+1)%r.vertices.length].y);a.lineTo(r.vertices[0].x,r.vertices[0].y),a.closePath()}l.wireframes?(a.lineWidth=1,a.strokeStyle=\"#bbb\",a.stroke()):(a.fillStyle=r.render.fillStyle,r.render.lineWidth&&(a.lineWidth=r.render.lineWidth,a.strokeStyle=r.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},n.bodyWireframes=function(e,t,o){var n,r,i,s,a,l=o,c=e.options.showInternalEdges;for(l.beginPath(),i=0;i<t.length;i++)if((n=t[i]).render.visible)for(a=n.parts.length>1?1:0;a<n.parts.length;a++){for(r=n.parts[a],l.moveTo(r.vertices[0].x,r.vertices[0].y),s=1;s<r.vertices.length;s++)!r.vertices[s-1].isInternal||c?l.lineTo(r.vertices[s].x,r.vertices[s].y):l.moveTo(r.vertices[s].x,r.vertices[s].y),r.vertices[s].isInternal&&!c&&l.moveTo(r.vertices[(s+1)%r.vertices.length].x,r.vertices[(s+1)%r.vertices.length].y);l.lineTo(r.vertices[0].x,r.vertices[0].y)}l.lineWidth=1,l.strokeStyle=\"#bbb\",l.stroke()},n.bodyConvexHulls=function(e,t,o){var n,r,i,s=o;for(s.beginPath(),r=0;r<t.length;r++)if((n=t[r]).render.visible&&1!==n.parts.length){for(s.moveTo(n.vertices[0].x,n.vertices[0].y),i=1;i<n.vertices.length;i++)s.lineTo(n.vertices[i].x,n.vertices[i].y);s.lineTo(n.vertices[0].x,n.vertices[0].y)}s.lineWidth=1,s.strokeStyle=\"rgba(255,255,255,0.2)\",s.stroke()},n.vertexNumbers=function(e,t,o){var n,r,i,s=o;for(n=0;n<t.length;n++){var a=t[n].parts;for(i=a.length>1?1:0;i<a.length;i++){var l=a[i];for(r=0;r<l.vertices.length;r++)s.fillStyle=\"rgba(255,255,255,0.2)\",s.fillText(n+\"_\"+r,l.position.x+.8*(l.vertices[r].x-l.position.x),l.position.y+.8*(l.vertices[r].y-l.position.y))}}},n.mousePosition=function(e,t,o){var n=o;n.fillStyle=\"rgba(255,255,255,0.8)\",n.fillText(t.position.x+\"  \"+t.position.y,t.position.x+5,t.position.y-5)},n.bodyBounds=function(e,t,o){var n=o,r=(e.engine,e.options);n.beginPath();for(var i=0;i<t.length;i++){var s=t[i];if(s.render.visible)for(var a=t[i].parts,l=a.length>1?1:0;l<a.length;l++){var c=a[l];n.rect(c.bounds.min.x,c.bounds.min.y,c.bounds.max.x-c.bounds.min.x,c.bounds.max.y-c.bounds.min.y)}}r.wireframes?n.strokeStyle=\"rgba(255,255,255,0.08)\":n.strokeStyle=\"rgba(0,0,0,0.1)\",n.lineWidth=1,n.stroke()},n.bodyAxes=function(e,t,o){var n,r,i,s,a=o,l=(e.engine,e.options);for(a.beginPath(),r=0;r<t.length;r++){var c=t[r],u=c.parts;if(c.render.visible)if(l.showAxes)for(i=u.length>1?1:0;i<u.length;i++)for(n=u[i],s=0;s<n.axes.length;s++){var d=n.axes[s];a.moveTo(n.position.x,n.position.y),a.lineTo(n.position.x+20*d.x,n.position.y+20*d.y)}else for(i=u.length>1?1:0;i<u.length;i++)for(n=u[i],s=0;s<n.axes.length;s++)a.moveTo(n.position.x,n.position.y),a.lineTo((n.vertices[0].x+n.vertices[n.vertices.length-1].x)/2,(n.vertices[0].y+n.vertices[n.vertices.length-1].y)/2)}l.wireframes?(a.strokeStyle=\"indianred\",a.lineWidth=1):(a.strokeStyle=\"rgba(255, 255, 255, 0.4)\",a.globalCompositeOperation=\"overlay\",a.lineWidth=2),a.stroke(),a.globalCompositeOperation=\"source-over\"},n.bodyPositions=function(e,t,o){var n,r,i,s,a=o,l=(e.engine,e.options);for(a.beginPath(),i=0;i<t.length;i++)if((n=t[i]).render.visible)for(s=0;s<n.parts.length;s++)r=n.parts[s],a.arc(r.position.x,r.position.y,3,0,2*Math.PI,!1),a.closePath();for(l.wireframes?a.fillStyle=\"indianred\":a.fillStyle=\"rgba(0,0,0,0.5)\",a.fill(),a.beginPath(),i=0;i<t.length;i++)(n=t[i]).render.visible&&(a.arc(n.positionPrev.x,n.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle=\"rgba(255,165,0,0.8)\",a.fill()},n.bodyVelocity=function(e,t,o){var n=o;n.beginPath();for(var r=0;r<t.length;r++){var i=t[r];i.render.visible&&(n.moveTo(i.position.x,i.position.y),n.lineTo(i.position.x+2*(i.position.x-i.positionPrev.x),i.position.y+2*(i.position.y-i.positionPrev.y)))}n.lineWidth=3,n.strokeStyle=\"cornflowerblue\",n.stroke()},n.bodyIds=function(e,t,o){var n,r,i=o;for(n=0;n<t.length;n++)if(t[n].render.visible){var s=t[n].parts;for(r=s.length>1?1:0;r<s.length;r++){var a=s[r];i.font=\"12px Arial\",i.fillStyle=\"rgba(255,255,255,0.5)\",i.fillText(a.id,a.position.x+10,a.position.y-10)}}},n.collisions=function(e,t,o){var n,r,i,s,a=o,l=e.options;for(a.beginPath(),i=0;i<t.length;i++)if((n=t[i]).isActive)for(r=n.collision,s=0;s<n.activeContacts.length;s++){var c=n.activeContacts[s],u=c.vertex;a.rect(u.x-1.5,u.y-1.5,3.5,3.5)}for(l.wireframes?a.fillStyle=\"rgba(255,255,255,0.7)\":a.fillStyle=\"orange\",a.fill(),a.beginPath(),i=0;i<t.length;i++)if((n=t[i]).isActive&&(r=n.collision,n.activeContacts.length>0)){var d=n.activeContacts[0].vertex.x,p=n.activeContacts[0].vertex.y;2===n.activeContacts.length&&(d=(n.activeContacts[0].vertex.x+n.activeContacts[1].vertex.x)/2,p=(n.activeContacts[0].vertex.y+n.activeContacts[1].vertex.y)/2),r.bodyB===r.supports[0].body||!0===r.bodyA.isStatic?a.moveTo(d-8*r.normal.x,p-8*r.normal.y):a.moveTo(d+8*r.normal.x,p+8*r.normal.y),a.lineTo(d,p)}l.wireframes?a.strokeStyle=\"rgba(255,165,0,0.7)\":a.strokeStyle=\"orange\",a.lineWidth=1,a.stroke()},n.separations=function(e,t,o){var n,r,i,s,a,l=o,c=e.options;for(l.beginPath(),a=0;a<t.length;a++)if((n=t[a]).isActive){r=n.collision,i=r.bodyA;var u=1;(s=r.bodyB).isStatic||i.isStatic||(u=.5),s.isStatic&&(u=0),l.moveTo(s.position.x,s.position.y),l.lineTo(s.position.x-r.penetration.x*u,s.position.y-r.penetration.y*u),u=1,s.isStatic||i.isStatic||(u=.5),i.isStatic&&(u=0),l.moveTo(i.position.x,i.position.y),l.lineTo(i.position.x+r.penetration.x*u,i.position.y+r.penetration.y*u)}c.wireframes?l.strokeStyle=\"rgba(255,165,0,0.5)\":l.strokeStyle=\"orange\",l.stroke()},n.grid=function(e,t,o){var n=o,i=e.options;i.wireframes?n.strokeStyle=\"rgba(255,180,0,0.1)\":n.strokeStyle=\"rgba(255,180,0,0.5)\",n.beginPath();for(var s=r.keys(t.buckets),a=0;a<s.length;a++){var l=s[a];if(!(t.buckets[l].length<2)){var c=l.split(/C|R/);n.rect(.5+parseInt(c[1],10)*t.bucketWidth,.5+parseInt(c[2],10)*t.bucketHeight,t.bucketWidth,t.bucketHeight)}}n.lineWidth=1,n.stroke()},n.inspector=function(e,t){e.engine;var o,n=e.selected,r=e.render,i=r.options;if(i.hasBounds){var s=r.bounds.max.x-r.bounds.min.x,a=r.bounds.max.y-r.bounds.min.y,l=s/r.options.width,c=a/r.options.height;t.scale(1/l,1/c),t.translate(-r.bounds.min.x,-r.bounds.min.y)}for(var u=0;u<n.length;u++){var d=n[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle=\"rgba(255,165,0,0.9)\",t.setLineDash([1,2]),d.type){case\"body\":o=d.bounds,t.beginPath(),t.rect(Math.floor(o.min.x-3),Math.floor(o.min.y-3),Math.floor(o.max.x-o.min.x+6),Math.floor(o.max.y-o.min.y+6)),t.closePath(),t.stroke();break;case\"constraint\":var p=d.pointA;d.bodyA&&(p=d.pointB),t.beginPath(),t.arc(p.x,p.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle=\"rgba(255,165,0,0.6)\",t.fillStyle=\"rgba(255,165,0,0.1)\",o=e.selectBounds,t.beginPath(),t.rect(Math.floor(o.min.x),Math.floor(o.min.y),Math.floor(o.max.x-o.min.x),Math.floor(o.max.y-o.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),i.hasBounds&&t.setTransform(1,0,0,1,0,0)};var o=function(e,t){var o=document.createElement(\"canvas\");return o.width=e,o.height=t,o.oncontextmenu=function(){return!1},o.onselectstart=function(){return!1},o},d=function(e){var t=e.getContext(\"2d\"),o=window.devicePixelRatio||1,n=t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1;return o/n},p=function(e,t){var o=e.textures[t];return o||((o=e.textures[t]=new Image).src=t,o)},f=function(e,t){var o=t;/(jpg|gif|png)$/.test(t)&&(o=\"url(\"+t+\")\"),e.canvas.style.background=o,e.canvas.style.backgroundSize=\"contain\",e.currentBackground=t}}()},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(e,t,o){var n={};t.exports=n;var r=e(\"../geometry/Bounds\"),i=e(\"../body/Composite\"),s=e(\"../core/Common\"),a=e(\"../core/Events\"),l=e(\"../geometry/Vector\");!function(){var e,t;\"undefined\"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(function(){e(s.now())},1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),n.create=function(e){s.warn(\"RenderPixi.create: Matter.RenderPixi is deprecated (see docs)\");var t={controller:n,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:\"#fafafa\",wireframeBackground:\"#222\",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},o=s.extend(t,e),r=!o.options.wireframes&&\"transparent\"===o.options.background;return o.pixiOptions=o.pixiOptions||{view:o.canvas,transparent:r,antialias:!0,backgroundColor:e.background},o.mouse=e.mouse,o.engine=e.engine,o.renderer=o.renderer||new PIXI.WebGLRenderer(o.options.width,o.options.height,o.pixiOptions),o.container=o.container||new PIXI.Container,o.spriteContainer=o.spriteContainer||new PIXI.Container,o.canvas=o.canvas||o.renderer.view,o.bounds=o.bounds||{min:{x:0,y:0},max:{x:o.options.width,y:o.options.height}},a.on(o.engine,\"beforeUpdate\",function(){n.clear(o)}),o.textures={},o.sprites={},o.primitives={},o.container.addChild(o.spriteContainer),s.isElement(o.element)?o.element.appendChild(o.canvas):s.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.'),o.canvas.oncontextmenu=function(){return!1},o.canvas.onselectstart=function(){return!1},o},n.run=function(t){!function o(r){t.frameRequestId=e(o),n.world(t)}()},n.stop=function(e){t(e.frameRequestId)},n.clear=function(e){for(var t=e.container,o=e.spriteContainer;t.children[0];)t.removeChild(t.children[0]);for(;o.children[0];)o.removeChild(o.children[0]);var n=e.sprites[\"bg-0\"];e.textures={},e.sprites={},e.primitives={},e.sprites[\"bg-0\"]=n,n&&t.addChildAt(n,0),e.container.addChild(e.spriteContainer),e.currentBackground=null,t.scale.set(1,1),t.position.set(0,0)},n.setBackground=function(e,t){if(e.currentBackground!==t){var o=t.indexOf&&-1!==t.indexOf(\"#\"),n=e.sprites[\"bg-0\"];if(o){var r=s.colorToNumber(t);e.renderer.backgroundColor=r,n&&e.container.removeChild(n)}else if(!n){var i=u(e,t);(n=e.sprites[\"bg-0\"]=new PIXI.Sprite(i)).position.x=0,n.position.y=0,e.container.addChildAt(n,0)}e.currentBackground=t}},n.world=function(e){var t,o=e.engine,s=o.world,a=e.renderer,c=e.container,u=e.options,d=i.allBodies(s),p=i.allConstraints(s),f=[];u.wireframes?n.setBackground(e,u.wireframeBackground):n.setBackground(e,u.background);var v=e.bounds.max.x-e.bounds.min.x,y=e.bounds.max.y-e.bounds.min.y,m=v/e.options.width,g=y/e.options.height;if(u.hasBounds){for(t=0;t<d.length;t++){var h=d[t];h.render.sprite.visible=r.overlaps(h.bounds,e.bounds)}for(t=0;t<p.length;t++){var x=p[t],b=x.bodyA,w=x.bodyB,S=x.pointA,M=x.pointB;b&&(S=l.add(b.position,x.pointA)),w&&(M=l.add(w.position,x.pointB)),S&&M&&(r.contains(e.bounds,S)||r.contains(e.bounds,M))&&f.push(x)}c.scale.set(1/m,1/g),c.position.set(-e.bounds.min.x*(1/m),-e.bounds.min.y*(1/g))}else f=p;for(t=0;t<d.length;t++)n.body(e,d[t]);for(t=0;t<f.length;t++)n.constraint(e,f[t]);a.render(c)},n.constraint=function(e,t){e.engine;var o=t.bodyA,n=t.bodyB,r=t.pointA,i=t.pointB,a=e.container,l=t.render,c=\"c-\"+t.id,u=e.primitives[c];u||(u=e.primitives[c]=new PIXI.Graphics),l.visible&&t.pointA&&t.pointB?(-1===s.indexOf(a.children,u)&&a.addChild(u),u.clear(),u.beginFill(0,0),u.lineStyle(l.lineWidth,s.colorToNumber(l.strokeStyle),1),o?u.moveTo(o.position.x+r.x,o.position.y+r.y):u.moveTo(r.x,r.y),n?u.lineTo(n.position.x+i.x,n.position.y+i.y):u.lineTo(i.x,i.y),u.endFill()):u.clear()},n.body=function(e,t){e.engine;var n=t.render;if(n.visible)if(n.sprite&&n.sprite.texture){var r=\"b-\"+t.id,i=e.sprites[r],a=e.spriteContainer;i||(i=e.sprites[r]=o(e,t)),-1===s.indexOf(a.children,i)&&a.addChild(i),i.position.x=t.position.x,i.position.y=t.position.y,i.rotation=t.angle,i.scale.x=n.sprite.xScale||1,i.scale.y=n.sprite.yScale||1}else{var l=\"b-\"+t.id,u=e.primitives[l],d=e.container;u||((u=e.primitives[l]=c(e,t)).initialAngle=t.angle),-1===s.indexOf(d.children,u)&&d.addChild(u),u.position.x=t.position.x,u.position.y=t.position.y,u.rotation=t.angle-u.initialAngle}};var o=function(e,t){var o=t.render,n=o.sprite.texture,r=u(e,n),i=new PIXI.Sprite(r);return i.anchor.x=t.render.sprite.xOffset,i.anchor.y=t.render.sprite.yOffset,i},c=function(e,t){var o,n=t.render,r=e.options,i=new PIXI.Graphics,a=s.colorToNumber(n.fillStyle),l=s.colorToNumber(n.strokeStyle),c=s.colorToNumber(n.strokeStyle),u=s.colorToNumber(\"#bbb\"),d=s.colorToNumber(\"#CD5C5C\");i.clear();for(var p=t.parts.length>1?1:0;p<t.parts.length;p++){o=t.parts[p],r.wireframes?(i.beginFill(0,0),i.lineStyle(1,u,1)):(i.beginFill(a,1),i.lineStyle(n.lineWidth,l,1)),i.moveTo(o.vertices[0].x-t.position.x,o.vertices[0].y-t.position.y);for(var f=1;f<o.vertices.length;f++)i.lineTo(o.vertices[f].x-t.position.x,o.vertices[f].y-t.position.y);i.lineTo(o.vertices[0].x-t.position.x,o.vertices[0].y-t.position.y),i.endFill(),(r.showAngleIndicator||r.showAxes)&&(i.beginFill(0,0),r.wireframes?i.lineStyle(1,d,1):i.lineStyle(1,c),i.moveTo(o.position.x-t.position.x,o.position.y-t.position.y),i.lineTo((o.vertices[0].x+o.vertices[o.vertices.length-1].x)/2-t.position.x,(o.vertices[0].y+o.vertices[o.vertices.length-1].y)/2-t.position.y),i.endFill())}return i},u=function(e,t){var o=e.textures[t];return o||(o=e.textures[t]=PIXI.Texture.fromImage(t)),o}}()},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)}).call(this,o(10))},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0)),i=o(11),s=o(12),a=o(13),l=o(14),c=o(15),u=o(16),d=o(17),p=o(18),f=o(19),v=o(20),y=o(22),m=o(24),g=o(26),h=o(28),x=o(30),b=o(31),w=o(32),S=o(4),M=o(8),_=o(33),P=o(34),C=o(35),A=o(7),O=o(36),B=o(37),I=o(38),k=o(39),T=o(40),j=o(41);o(42);var R=o(43),V=r.Engine,E=r.Render;r.use(\"matter-attractors\");var F=function(){return function(e){if(this.aTAM=[],this.Matter=r,this.worldObjects=[],this.utils={addAttracted:i.addAttracted.bind(null,this),addAttractor:s.addAttractor.bind(null,this),addAttractorOrbit:a.addAttractorOrbit.bind(null,this),applyForceToBody:l.applyForceToBody.bind(null),attractAllToOne:c.attractAllToOne.bind(null),attractSomeToOne:u.attractSomeToOne.bind(null,this),checkIfSpaceOccupied:d.checkIfSpaceOccupied.bind(null,this),checkOnScreen:p.checkOnScreen.bind(null,this),clearMatter:f.clearMatter.bind(null,this),createCircular:v.createCircular.bind(null,this),createConstraint:y.createConstraint.bind(null,this),createPolygon:m.createPolygon.bind(null,this),createRectangle:g.createRectangle.bind(null,this),createIrregular:h.createIrregular.bind(null,this),deleteBody:x.deleteBody.bind(null,this),deleteComposite:b.deleteComposite.bind(null,this),deleteConstraint:w.deleteConstraint.bind(null,this),getAngleBetweenTwoPoints:S.getAngleBetweenTwoPoints.bind(null),randomAlphaMinMaxDeg:M.randomAlphaMinMaxDeg.bind(null),removeAttracted:_.removeAttracted.bind(null,this),removeAttractor:P.removeAttractor.bind(null,this),rotateBody:C.rotateBody.bind(null),scaleBody:A.scaleBody.bind(null),scaleBodyOverTime:O.scaleBodyOverTime.bind(null),setGravity:R.setGravity.bind(null,this),setPositionOfBody:B.setPositionOfBody.bind(null),setStaticToBody:I.setStaticToBody.bind(null),suggestPositionWithinScreenBounds:k.suggestPositionWithinScreenBounds.bind(null,this),translateBody:T.translateBody.bind(null),updateMatterEngine:j.updateMatterEngine.bind(null,this)},this.setup=e,this.engine=V.create(),e.noRenderer||(this.render=E.create({element:document.body,engine:this.engine,options:{width:e.width,height:e.height,wireframes:!1},bounds:{min:{x:0,y:0},max:{x:e.width,y:e.height}}}),E.run(this.render),this.globalContext=this.render.context),this.world=this.engine.world,void 0===e.gravityY?this.world.gravity.y=0:this.world.gravity.y=e.gravityY,void 0===e.gravityX?this.world.gravity.x=0:this.world.gravity.x=e.gravityX,!e.noWalls){var t={isStatic:!0},o=void 0;o={x:-25,y:e.height/2,w:50,h:e.height,matterOptions:t},g.createRectangle(this,o),o={x:e.width+25,y:e.height/2,w:50,h:e.height,matterOptions:t},g.createRectangle(this,o),o={x:e.width/2,y:-25,w:e.width,h:50,matterOptions:t},g.createRectangle(this,o),o={x:e.width/2,y:e.height+25,w:e.width,h:50,matterOptions:t},g.createRectangle(this,o)}}}();t.MatterSetup=F},function(e,t,o){\"use strict\";e.exports=function(e,t,o,n,r,i,s,a){if(!e){var l;if(void 0===t)l=new Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var c=[o,n,r,i,s,a],u=0;(l=new Error(t.replace(/%s/g,function(){return c[u++]}))).name=\"Invariant Violation\"}throw l.framesToPop=1,l}}},function(e,t,o){\"use strict\";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,\"__esModule\",{value:!0});var r=o(5),i=o(6),s=o(7),a=function(e){function t(t){var o=e.call(this)||this;return o.growComplete=!0,o.x=t.x,o.y=t.y,o.matterOptions=t.matterOptions,o.myID=i.MatterObjects.bodyID,i.MatterObjects.bodyID=i.MatterObjects.bodyID+1,o}return n(t,e),t.prototype.update=function(){this.growComplete||(this.animSteps=this.animSteps-1,s.scaleBody(this.body,this.toScaleX,this.toScaleY,this.point),0===this.animSteps&&(this.growComplete=!0))},t.prototype.setScaleOverTime=function(e,t,o,n){this.growComplete=!1,this.animSteps=n,this.toScaleX=e/n,this.toScaleY=t/n,this.point=void 0!==o?o:null},t.prototype.setFriction=function(e){this.body.friction=e},t.prototype.setElasticity=function(e){this.body.restitution=e},t.prototype.setNewAngle=function(e){this.body.setAngle(e)},t}(r.GlobalObject);t.MatterBody=a},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getAngleBetweenTwoPoints=function(e,t){return 180*Math.atan2(e.y-t.y,e.x-t.x)/Math.PI+180}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){return function(){}}();t.GlobalObject=n},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){function e(){}return e.bodyID=0,e}();t.MatterObjects=n},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.scaleBody=function(e,t,o,n){void 0===n?r.Body.scale(e.body,t,o):r.Body.scale(e.body,t,o,n)}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.randomAlphaMinMaxDeg=function(e,t){return(Math.floor(Math.random()*(t-e+1))+e)*(Math.PI/180)}},function(e,t,o){\"use strict\";var n=o(1);e.exports=n.MatterSetup},function(e,t){var o;o=function(){return this}();try{o=o||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(o=window)}e.exports=o},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.addAttracted=function(e,t,o,n){for(var r=0;r<e.aTAM.length;r+=1)if(e.aTAM[r].attractor.myID===o){var i={object:t,customOrbit:0,stopAttraction:!1};return void 0!==n&&(i.customOrbit=n),void e.aTAM[r].attracted.push(i)}}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.addAttractor=function(e,t){for(var o=0;o<e.aTAM.length;o+=1)for(var n=0;n<e.aTAM[o].attracted.length;n+=1)e.aTAM[o].attracted[n].stopAttraction=!1;var r={attractor:t};e.aTAM.push(r),e.aTAM[e.aTAM.length-1].attracted=[]}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.addAttractorOrbit=function(e,t,o,n){for(var r=0;r<e.aTAM.length;r+=1)if(e.aTAM[r].attractor.myID===t)return void 0!==o&&(e.aTAM[r].orbitMin=o),void(void 0!==n&&(e.aTAM[r].orbitMax=n))}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.applyForceToBody=function(e,t,o){r.Body.applyForce(e.body,t,o)}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.attractAllToOne=function(e,t){return{x:1e-5*(e.position.x-t.position.x),y:1e-5*(e.position.y-t.position.y)}}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0)),i=o(4);t.attractSomeToOne=function(e,t,o){for(var n=0;n<e.aTAM.length;n+=1){var s=e.aTAM[n];if(s.attractor.body.id===t.id){for(var a=s.attractor.body,l=0;l<s.attracted.length;l+=1){var c=s.attracted[l];if(!1===c.stopAttraction&&c.object.body.id===o.id){var u={x:0,y:0};if(void 0!==s.orbitMin){var d={x:a.position.x,y:a.position.y},p={x:c.object.body.position.x,y:c.object.body.position.y},f=i.getAngleBetweenTwoPoints(d,p),v=t.position.x+Math.cos(f/180*Math.PI)*s.orbitMin,y=t.position.y+Math.sin(f/180*Math.PI)*s.orbitMin*-1,m=Math.abs(v)-o.position.x,g=Math.abs(y)-o.position.y;u.x=m>-10&&m<10?0:1e-5*(Math.abs(v)-o.position.x),u.y=g>-10&&g<10?0:1e-5*(Math.abs(y)-o.position.y)}else c.customOrbit>0?(d={x:a.position.x,y:a.position.y},p={x:c.object.body.position.x,y:c.object.body.position.y},f=i.getAngleBetweenTwoPoints(d,p),v=t.position.x+Math.cos(f/180*Math.PI)*c.customOrbit,y=t.position.y+Math.sin(f/180*Math.PI)*c.customOrbit*-1,m=Math.abs(v)-o.position.x,g=Math.abs(y)-o.position.y,m>-1&&m<1?(u.x=0,o.velocity.x=0):u.x=1e-5*(Math.abs(v)-o.position.x),g>-1&&g<1?(u.y=0,o.velocity.y=0):u.y=1e-5*(Math.abs(y)-o.position.y)):u={x:1e-5*(t.position.x-o.position.x),y:1e-5*(t.position.y-o.position.y)};0===u.x&&0===u.y||r.Body.applyForce(o,o.position,u)}}return}}}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.checkIfSpaceOccupied=function(e,t){for(var o={min:{x:t.cx-t.radius,y:t.cy-t.radius},max:{x:t.cx+t.radius,y:t.cy+t.radius}},n=0;n<e.worldObjects.length;n+=1)if(void 0!==e.worldObjects[n].body&&r.Bounds.overlaps(e.worldObjects[n].body.bounds,o))return!0;return!1}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.checkOnScreen=function(e,t){var o={min:{x:0,y:0},max:{x:e.setup.width,y:e.setup.height}};return!!r.Bounds.overlaps(t.body.bounds,o)}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.clearMatter=function(e){for(var t=e.worldObjects.length-1;t>=0;t-=1)void 0!==e.worldObjects[t].body?(r.World.remove(e.world,e.worldObjects[t].body),e.worldObjects.splice(t,1)):void 0!==e.worldObjects[t].constraint&&(r.World.remove(e.world,e.worldObjects[t].constraint),e.worldObjects.splice(t,1));r.Render.stop(e.render),r.Engine.clear(e.engine)}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=o(21),i=n(o(0));t.createCircular=function(e,t){var o=new r.ObjectCircular(t);return e.worldObjects.push(o),i.World.add(e.world,o.body),o}},function(e,t,o){\"use strict\";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var i=o(3),s=r(o(0)),a=o(1),l=function(e){function t(t){var o=e.call(this,t)||this;return o.r=t.r,o.body=s.Bodies.circle(o.x,o.y,o.r,t.matterOptions),o}return n(t,e),t.prototype.show=function(e){o(2)(a.MatterSetup.prototype.setup.noRenderer,\"Matter Render was not enabled! This function cannot be called.\");var t=this.body.position,n=this.body.angle;a.MatterSetup.prototype.globalContext.translate(t.x,t.y),a.MatterSetup.prototype.globalContext.rotate(n),e?a.MatterSetup.prototype.globalContext.drawImage(e,0,0,this.x+this.r,this.y+this.r):a.MatterSetup.prototype.globalContext.ellipse(0,0,2*this.r)},t}(i.MatterBody);t.ObjectCircular=l},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=o(23),i=n(o(0));t.createConstraint=function(e,t){var o=new r.ObjectConstraint(t);return e.worldObjects.push(o),i.World.add(e.world,o.constraint),o}},function(e,t,o){\"use strict\";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(o(0)),s=o(6),a=o(1),l=function(e){function t(t){var o=e.call(this)||this;return o.color=t.color,o.growOver=t.growOver,o.animSteps=t.animSteps,o.constraint=i.Constraint.create(t.options),o.bodyID=s.MatterObjects.bodyID,s.MatterObjects.bodyID=s.MatterObjects.bodyID+1,null!=o.growOver&&(o.growComplete=!1,o.animStep=o.animSteps),o}return n(t,e),t.prototype.setDamping=function(e){this.constraint.damping=e},t.prototype.setStiffness=function(e){this.constraint.stiffness=e},t.prototype.show=function(){o(2)(a.MatterSetup.prototype.setup.noRenderer,\"Matter Render was not enabled! This function cannot be called.\");var e=this.constraint.pointA,t=this.constraint.pointB;a.MatterSetup.prototype.globalContext.beginPath(),a.MatterSetup.prototype.globalContext.moveTo(e),a.MatterSetup.prototype.globalContext.lineTo(t),a.MatterSetup.prototype.globalContext.lineWidth=4,a.MatterSetup.prototype.globalContext.strokeStyle=this.color,a.MatterSetup.prototype.globalContext.stroke()},t.prototype.update=function(){this.growComplete||(this.animSteps=this.animSteps-1,0===this.animSteps&&(this.growComplete=!0))},t}(o(5).GlobalObject);t.ObjectConstraint=l},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=o(25),i=n(o(0));t.createPolygon=function(e,t){console.log(this);var o=new r.ObjectPolygon(t);return e.worldObjects.push(o),i.World.add(e.world,o.body),o}},function(e,t,o){\"use strict\";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var i=o(3),s=r(o(0)),a=o(1),l=function(e){function t(t){var o=e.call(this,t)||this;return o.r=t.r,o.sides=t.sides,o.body=s.Bodies.polygon(o.x,o.y,o.sides,o.r,t.matterOptions),o}return n(t,e),t.prototype.show=function(e){o(2)(a.MatterSetup.prototype.setup.noRenderer,\"Matter Render was not enabled! This function cannot be called.\");var t=this.body.position,n=this.body.angle;a.MatterSetup.prototype.globalContext.translate(t.x,t.y),a.MatterSetup.prototype.globalContext.rotate(n),e&&a.MatterSetup.prototype.globalContext.drawImage(e,0,0,this.x+this.r,this.y+this.r)},t}(i.MatterBody);t.ObjectPolygon=l},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=o(27),i=n(o(0));t.createRectangle=function(e,t){var o=new r.ObjectRectangle(t);return e.worldObjects.push(o),i.World.add(e.world,o.body),o}},function(e,t,o){\"use strict\";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var i=o(3),s=r(o(0)),a=o(1),l=function(e){function t(t){var o=e.call(this,t)||this;return o.w=t.w,o.h=t.h,o.body=s.Bodies.rectangle(o.x,o.y,o.w,o.h,t.matterOptions),o}return n(t,e),t.prototype.show=function(e){o(2)(a.MatterSetup.prototype.setup.noRenderer,\"Matter Render was not enabled! This function cannot be called.\");var t=this.body.position,n=this.body.angle;a.MatterSetup.prototype.globalContext.translate(t.x,t.y),a.MatterSetup.prototype.globalContext.rotate(n),e?a.MatterSetup.prototype.globalContext.drawImage(e,0,0,this.w,this.h):a.MatterSetup.prototype.globalContext.rect(0,0,this.w,this.h)},t}(i.MatterBody);t.ObjectRectangle=l},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=o(29),i=n(o(0));t.createIrregular=function(e,t){var o=new r.ObjectIrregular(t);return e.worldObjects.push(o),i.World.add(e.world,o.body),o}},function(e,t,o){\"use strict\";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var i=o(3),s=r(o(0)),a=o(1),l=function(e){function t(t){var o=e.call(this,t)||this;return o.vertices=t.vertices,o.colorStroke=t.colorStroke,null===o.colorStroke&&(o.colorStroke=\"#C0C0C0\"),o.colorFill=t.colorFill,null===o.colorFill&&(o.colorFill=\"#008080\"),o.lineWidth=t.lineWidth,null===o.lineWidth&&(o.lineWidth=4),o.body=s.Bodies.fromVertices(o.x,o.y,o.vertices,t.matterOptions),o}return n(t,e),t.prototype.show=function(){o(2)(a.MatterSetup.prototype.setup.noRenderer,\"Matter Render was not enabled! This function cannot be called.\"),a.MatterSetup.prototype.globalContext.beginPath(),a.MatterSetup.prototype.globalContext.moveTo(this.vertices[0].x,this.vertices[0].y);for(var e=1;e<this.vertices.length;e+=1)a.MatterSetup.prototype.globalContext.lineTo(this.vertices[e].x,this.vertices[e].y);a.MatterSetup.prototype.globalContext.lineWidth=this.lineWidth,a.MatterSetup.prototype.globalContext.strokeStyle=this.colorStroke,a.MatterSetup.prototype.globalContext.stroke(),a.MatterSetup.prototype.globalContext.fillStyle=this.colorFill,a.MatterSetup.prototype.globalContext.fill()},t}(i.MatterBody);t.ObjectIrregular=l},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.deleteBody=function(e,t){for(var o=e.worldObjects.length-1;o>=0;o-=1)if(void 0!==e.worldObjects[o].body&&t.body.id===e.worldObjects[o].body.id)return r.World.remove(e.world,e.worldObjects[o].body),void e.worldObjects.splice(o,1)}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.deleteComposite=function(e,t){for(var o=e.worldObjects.length-1;o>=0;o-=1)if(void 0!==e.worldObjects[o].composite&&t.composite.id===e.worldObjects[o].composite.id)return r.World.remove(e.world,e.worldObjects[o].composite),void e.worldObjects.splice(o,1)}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.deleteConstraint=function(e,t){for(var o=e.worldObjects.length-1;o>=0;o-=1)if(void 0!==e.worldObjects[o].constraint&&t.constraint.id===e.worldObjects[o].constraint.id)return r.World.remove(e.world,e.worldObjects[o].constraint),void e.worldObjects.splice(o,1)}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.removeAttracted=function(e,t,o){for(var n=0;n<e.aTAM.length;n+=1)if(e.aTAM[n].attractor.myID===o){for(var r=e.aTAM[n].attracted.length-1;r>=0;r-=1)e.aTAM[n].attracted[r].object.myID===t&&e.aTAM[n].attracted.splice(r,1);return}}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.removeAttractor=function(e,t){for(var o=e.aTAM.length-1;o>=0;o-=1)if(e.aTAM[o].attractor.myID===t)return void e.aTAM.splice(o,1)}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=o(0);t.rotateBody=function(e,t){n.Body.rotate(e.body,t)}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.scaleBodyOverTime=function(e,t,o,n,r){e.setScaleOverTime(t,o,n,r)}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.setPositionOfBody=function(e,t){r.Body.setPosition(e.body,t)}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.setStaticToBody=function(e,t){r.Body.setStatic(e.body,t)}},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=o(8);t.suggestPositionWithinScreenBounds=function(e,t){var o=70,r=n.randomAlphaMinMaxDeg(90*t.index+90,90*t.index+120),i=t.cx+Math.cos((r+60)/180*Math.PI)*o,s=t.cy+Math.sin((r+60)/180*Math.PI)*o*-1;do{(i<t.w/2||s<t.h/2||i>e.setup.width-t.w/2||s>e.setup.height-t.h/2)&&(i<t.w/2&&(r=n.randomAlphaMinMaxDeg(t.index,30+45*t.index)),s<t.h/2&&(r=n.randomAlphaMinMaxDeg(45*t.index,30+90*t.index)),i>e.setup.width-t.w/2&&(r=n.randomAlphaMinMaxDeg(180*t.index,30+245*t.index)),s>e.setup.height-t.h/2&&(r=n.randomAlphaMinMaxDeg(245*t.index,30+300*t.index)),o-=1,i=t.cx+Math.cos(r/180*Math.PI)*o,s=t.cy+Math.sin(r/180*Math.PI)*o*-1)}while(i<t.w/2||s<t.h/2||i>e.setup.width-t.w/2||s>e.setup.height-t.h/2);return{x:i,y:s}}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.translateBody=function(e,t){r.Body.translate(e.body,t)}},function(e,t,o){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(o(0));t.updateMatterEngine=function(e,t){void 0===t?r.Engine.update(e.engine):r.Engine.update(e.engine,t)}},function(e,t,o){\n/*!\n * matter-attractors 0.1.6 by Liam Brummitt 2017-05-15\n * https://github.com/liabru/matter-attractors\n * License MIT\n */\n!function(t,n){e.exports=n(o(0))}(0,function(e){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.i=function(e){return e},o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,\"a\",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p=\"/libs\",o(o.s=1)}([function(t,o){t.exports=e},function(e,t,o){\"use strict\";var n=o(0),r={name:\"matter-attractors\",version:\"0.1.4\",for:\"matter-js@^0.12.0\",install:function(e){e.after(\"Body.create\",function(){r.Body.init(this)}),e.before(\"Engine.update\",function(e){r.Engine.update(e)})},Body:{init:function(e){e.plugin.attractors=e.plugin.attractors||[]}},Engine:{update:function(e){for(var t=e.world,o=n.Composite.allBodies(t),r=0;r<o.length;r+=1){var i=o[r],s=i.plugin.attractors;if(s&&s.length>0)for(var a=r+1;a<o.length;a+=1)for(var l=o[a],c=0;c<s.length;c+=1){var u=s[c],d=u;n.Common.isFunction(u)&&(d=u(i,l)),d&&n.Body.applyForce(l,l.position,d)}}}},Attractors:{gravityConstant:.001,gravity:function(e,t){var o=n.Vector.sub(t.position,e.position),i=n.Vector.magnitudeSquared(o)||1e-4,s=n.Vector.normalise(o),a=-r.Attractors.gravityConstant*(e.mass*t.mass/i),l=n.Vector.mult(s,a);n.Body.applyForce(e,e.position,n.Vector.neg(l)),n.Body.applyForce(t,t.position,l)}}};n.Plugin.register(r),e.exports=r}])})},function(e,t,o){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.setGravity=function(e,t,o){e.world.gravity.x=t,e.world.gravity.y=o}}])});\n//# sourceMappingURL=lampix.js.map"],"sourceRoot":""}